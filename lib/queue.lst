                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Oct 17 2006)
                              4 ; This file generated Thu Oct 19 04:11:59 2006
                              5 ;--------------------------------------------------------
                              6 	.module queue
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _dequeue_check
                             13 	.globl _dequeue_remove
                             14 	.globl _dequeue_insert_after
                             15 	.globl _dequeue_push
                             16 	.globl _dequeue_push_front
                             17 	.globl _dequeue_pop
                             18 	.globl _dequeue_pop_front
                             19 	.globl _clist_remove
                             20 	.globl _clist_insert
                             21 ;--------------------------------------------------------
                             22 ; special function registers
                             23 ;--------------------------------------------------------
                             24 ;--------------------------------------------------------
                             25 ;  ram data
                             26 ;--------------------------------------------------------
                             27 	.area _DATA
                             28 ;--------------------------------------------------------
                             29 ; overlayable items in  ram 
                             30 ;--------------------------------------------------------
                             31 	.area _OVERLAY
                             32 ;--------------------------------------------------------
                             33 ; external initialized ram data
                             34 ;--------------------------------------------------------
                             35 ;--------------------------------------------------------
                             36 ; global & static initialisations
                             37 ;--------------------------------------------------------
                             38 	.area _HOME
                             39 	.area _GSINIT
                             40 	.area _GSFINAL
                             41 	.area _GSINIT
                             42 ;--------------------------------------------------------
                             43 ; Home
                             44 ;--------------------------------------------------------
                             45 	.area _HOME
                             46 	.area _CODE
                             47 ;--------------------------------------------------------
                             48 ; code
                             49 ;--------------------------------------------------------
                             50 	.area _CODE
                             51 ;queue.c:15: dequeue_check (struct dequeue_hdr *list)
                             52 ;	genLabel
                             53 ;	genFunction
                             54 ;	---------------------------------
                             55 ; Function dequeue_check
                             56 ; ---------------------------------
   0000                      57 _dequeue_check_start::
   0000                      58 _dequeue_check:
   0000 DD E5                59 	push	ix
   0002 DD 21 00 00          60 	ld	ix,#0
   0006 DD 39                61 	add	ix,sp
   0008 21 F6 FF             62 	ld	hl,#-10
   000B 39                   63 	add	hl,sp
   000C F9                   64 	ld	sp,hl
                             65 ;queue.c:23: return;
                             66 ;	genRet
                             67 ;queue.c:60: *((char *) 0) = 0;
                             68 ;	genLabel
   000D                      69 00133$:
                             70 ;	genEndFunction
   000D DD F9                71 	ld	sp,ix
   000F DD E1                72 	pop	ix
   0011 C9                   73 	ret
   0012                      74 _dequeue_check_end::
   0012                      75 __str_0:
   0012 69 6E 76 61 6C 69    76 	.ascii "invalid NULL in head"
        64 20 4E 55 4C 4C
        20 69 6E 20 68 65
        61 64
   0026 00                   77 	.db 0x00
   0027                      78 __str_1:
   0027 69 6E 76 61 6C 69    79 	.ascii "invalid ptr to prev"
        64 20 70 74 72 20
        74 6F 20 70 72 65
        76
   003A 00                   80 	.db 0x00
   003B                      81 __str_2:
   003B 69 6E 76 61 6C 69    82 	.ascii "invalid ptr to last"
        64 20 70 74 72 20
        74 6F 20 6C 61 73
        74
   004E 00                   83 	.db 0x00
   004F                      84 __str_3:
   004F 66 69 72 73 74 20    85 	.ascii "first has prev"
        68 61 73 20 70 72
        65 76
   005D 00                   86 	.db 0x00
   005E                      87 __str_4:
   005E 6C 61 73 74 20 68    88 	.ascii "last has next"
        61 73 20 6E 65 78
        74
   006B 00                   89 	.db 0x00
   006C                      90 __str_5:
   006C 63 69 72 63 75 6C    91 	.ascii "circular err"
        61 72 20 65 72 72
   0078 00                   92 	.db 0x00
   0079                      93 __str_6:
   0079 64 65 71 75 65 75    94 	.ascii "dequeue_check: %s"
        65 5F 63 68 65 63
        6B 3A 20 25 73
   008A 0A                   95 	.db 0x0A
   008B 00                   96 	.db 0x00
                             97 ;queue.c:66: dequeue_remove (struct dequeue_hdr *list, struct dequeue_node *record)
                             98 ;	genLabel
                             99 ;	genFunction
                            100 ;	---------------------------------
                            101 ; Function dequeue_remove
                            102 ; ---------------------------------
   008C                     103 _dequeue_remove_start::
   008C                     104 _dequeue_remove:
   008C DD E5               105 	push	ix
   008E DD 21 00 00         106 	ld	ix,#0
   0092 DD 39               107 	add	ix,sp
   0094 21 F8 FF            108 	ld	hl,#-8
   0097 39                  109 	add	hl,sp
   0098 F9                  110 	ld	sp,hl
                            111 ;queue.c:68: struct dequeue_node *p = record->prev;
                            112 ;	genAssign
                            113 ;	AOP_STK for 
   0099 DD 4E 06            114 	ld	c,6(ix)
   009C DD 46 07            115 	ld	b,7(ix)
                            116 ;	genPointerGet
   009F 69                  117 	ld	l,c
   00A0 60                  118 	ld	h,b
   00A1 5E                  119 	ld	e,(hl)
   00A2 23                  120 	inc	hl
   00A3 56                  121 	ld	d,(hl)
                            122 ;	genAssign
                            123 ;	AOP_STK for _dequeue_remove_p_1_1
   00A4 DD 73 FE            124 	ld	-2(ix),e
   00A7 DD 72 FF            125 	ld	-1(ix),d
                            126 ;queue.c:69: struct dequeue_node *n = record->next;
                            127 ;	genPlus
                            128 ;	genPlusIncr
   00AA 59                  129 	ld	e,c
   00AB 50                  130 	ld	d,b
   00AC 13                  131 	inc	de
   00AD 13                  132 	inc	de
                            133 ;	genPointerGet
   00AE 6B                  134 	ld	l,e
   00AF 62                  135 	ld	h,d
   00B0 5E                  136 	ld	e,(hl)
   00B1 23                  137 	inc	hl
   00B2 56                  138 	ld	d,(hl)
                            139 ;	genAssign
                            140 ;	AOP_STK for _dequeue_remove_n_1_1
   00B3 DD 73 FC            141 	ld	-4(ix),e
   00B6 DD 72 FD            142 	ld	-3(ix),d
                            143 ;queue.c:71: dequeue_check (list);
                            144 ;	genIpush
                            145 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 1 deSending: 0
   00B9 C5                  146 	push	bc
                            147 ;	AOP_STK for 
   00BA DD 6E 04            148 	ld	l,4(ix)
   00BD DD 66 05            149 	ld	h,5(ix)
   00C0 E5                  150 	push	hl
                            151 ;	genCall
   00C1 CDr00s00            152 	call	_dequeue_check
   00C4 F1                  153 	pop	af
   00C5 C1                  154 	pop	bc
                            155 ;queue.c:72: if (p != NULL)
                            156 ;	genCmpEq
                            157 ;	AOP_STK for _dequeue_remove_p_1_1
                            158 ; genCmpEq: left 2, right 2, result 0
   00C6 DD 7E FE            159 	ld	a,-2(ix)
   00C9 DD B6 FF            160 	or	a,-1(ix)
   00CC CArE2s00            161 	jp	z,00102$
   00CF                     162 00115$:
                            163 ;queue.c:73: p->next = n;
                            164 ;	genPlus
                            165 ;	AOP_STK for _dequeue_remove_p_1_1
                            166 ;	genPlusIncr
   00CF DD 5E FE            167 	ld	e,-2(ix)
   00D2 DD 56 FF            168 	ld	d,-1(ix)
   00D5 13                  169 	inc	de
   00D6 13                  170 	inc	de
                            171 ;	genAssign (pointer)
                            172 ;	AOP_STK for _dequeue_remove_n_1_1
                            173 ;	isBitvar = 0
   00D7 6B                  174 	ld	l,e
   00D8 62                  175 	ld	h,d
   00D9 DD 7E FC            176 	ld	a,-4(ix)
   00DC 77                  177 	ld	(hl),a
   00DD 23                  178 	inc	hl
   00DE DD 7E FD            179 	ld	a,-3(ix)
   00E1 77                  180 	ld	(hl),a
                            181 ;	genLabel
   00E2                     182 00102$:
                            183 ;queue.c:74: if (n != NULL)
                            184 ;	genCmpEq
                            185 ;	AOP_STK for _dequeue_remove_n_1_1
                            186 ; genCmpEq: left 2, right 2, result 0
   00E2 DD 7E FC            187 	ld	a,-4(ix)
   00E5 DD B6 FD            188 	or	a,-3(ix)
   00E8 CArFAs00            189 	jp	z,00104$
   00EB                     190 00116$:
                            191 ;queue.c:75: n->prev = p;
                            192 ;	genAssign (pointer)
                            193 ;	AOP_STK for _dequeue_remove_n_1_1
                            194 ;	AOP_STK for _dequeue_remove_p_1_1
                            195 ;	isBitvar = 0
   00EB DD 6E FC            196 	ld	l,-4(ix)
   00EE DD 66 FD            197 	ld	h,-3(ix)
   00F1 DD 7E FE            198 	ld	a,-2(ix)
   00F4 77                  199 	ld	(hl),a
   00F5 23                  200 	inc	hl
   00F6 DD 7E FF            201 	ld	a,-1(ix)
   00F9 77                  202 	ld	(hl),a
                            203 ;	genLabel
   00FA                     204 00104$:
                            205 ;queue.c:76: if (list->first == record)
                            206 ;	genAssign
                            207 ;	AOP_STK for 
                            208 ;	AOP_STK for _dequeue_remove_sloc0_1_0
   00FA DD 7E 04            209 	ld	a,4(ix)
   00FD DD 77 FA            210 	ld	-6(ix),a
   0100 DD 7E 05            211 	ld	a,5(ix)
   0103 DD 77 FB            212 	ld	-5(ix),a
                            213 ;	genPointerGet
                            214 ;	AOP_STK for _dequeue_remove_sloc0_1_0
   0106 DD 6E FA            215 	ld	l,-6(ix)
   0109 DD 66 FB            216 	ld	h,-5(ix)
   010C 5E                  217 	ld	e,(hl)
   010D 23                  218 	inc	hl
   010E 56                  219 	ld	d,(hl)
                            220 ;	genCmpEq
                            221 ; genCmpEq: left 2, right 2, result 0
   010F 7B                  222 	ld	a,e
   0110 B9                  223 	cp	c
   0111 C2r19s01            224 	jp	nz,00117$
   0114 7A                  225 	ld	a,d
   0115 B8                  226 	cp	b
   0116 CAr1Cs01            227 	jp	z,00118$
   0119                     228 00117$:
   0119 C3r2Bs01            229 	jp	00106$
   011C                     230 00118$:
                            231 ;queue.c:77: list->first = n;
                            232 ;	genAssign (pointer)
                            233 ;	AOP_STK for _dequeue_remove_sloc0_1_0
                            234 ;	AOP_STK for _dequeue_remove_n_1_1
                            235 ;	isBitvar = 0
   011C DD 6E FA            236 	ld	l,-6(ix)
   011F DD 66 FB            237 	ld	h,-5(ix)
   0122 DD 7E FC            238 	ld	a,-4(ix)
   0125 77                  239 	ld	(hl),a
   0126 23                  240 	inc	hl
   0127 DD 7E FD            241 	ld	a,-3(ix)
   012A 77                  242 	ld	(hl),a
                            243 ;	genLabel
   012B                     244 00106$:
                            245 ;queue.c:78: if (list->last == record)
                            246 ;	genPlus
                            247 ;	AOP_STK for _dequeue_remove_sloc0_1_0
                            248 ;	AOP_STK for _dequeue_remove_sloc1_1_0
                            249 ;	genPlusIncr
                            250 ;	Can't optimise plus by inc, falling back to the normal way
   012B DD 7E FA            251 	ld	a,-6(ix)
   012E C6 02               252 	add	a,#0x02
   0130 DD 77 F8            253 	ld	-8(ix),a
   0133 DD 7E FB            254 	ld	a,-5(ix)
   0136 CE 00               255 	adc	a,#0x00
   0138 DD 77 F9            256 	ld	-7(ix),a
                            257 ;	genPointerGet
                            258 ;	AOP_STK for _dequeue_remove_sloc1_1_0
   013B DD 6E F8            259 	ld	l,-8(ix)
   013E DD 66 F9            260 	ld	h,-7(ix)
   0141 5E                  261 	ld	e,(hl)
   0142 23                  262 	inc	hl
   0143 56                  263 	ld	d,(hl)
                            264 ;	genCmpEq
                            265 ; genCmpEq: left 2, right 2, result 0
   0144 7B                  266 	ld	a,e
   0145 B9                  267 	cp	c
   0146 C2r4Es01            268 	jp	nz,00119$
   0149 7A                  269 	ld	a,d
   014A B8                  270 	cp	b
   014B CAr51s01            271 	jp	z,00120$
   014E                     272 00119$:
   014E C3r60s01            273 	jp	00108$
   0151                     274 00120$:
                            275 ;queue.c:79: list->last = p;
                            276 ;	genAssign (pointer)
                            277 ;	AOP_STK for _dequeue_remove_sloc1_1_0
                            278 ;	AOP_STK for _dequeue_remove_p_1_1
                            279 ;	isBitvar = 0
   0151 DD 6E F8            280 	ld	l,-8(ix)
   0154 DD 66 F9            281 	ld	h,-7(ix)
   0157 DD 7E FE            282 	ld	a,-2(ix)
   015A 77                  283 	ld	(hl),a
   015B 23                  284 	inc	hl
   015C DD 7E FF            285 	ld	a,-1(ix)
   015F 77                  286 	ld	(hl),a
                            287 ;	genLabel
   0160                     288 00108$:
                            289 ;queue.c:80: dequeue_check (list);
                            290 ;	genIpush
                            291 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
                            292 ;	AOP_STK for _dequeue_remove_sloc0_1_0
   0160 DD 6E FA            293 	ld	l,-6(ix)
   0163 DD 66 FB            294 	ld	h,-5(ix)
   0166 E5                  295 	push	hl
                            296 ;	genCall
   0167 CDr00s00            297 	call	_dequeue_check
   016A F1                  298 	pop	af
                            299 ;	genLabel
   016B                     300 00109$:
                            301 ;	genEndFunction
   016B DD F9               302 	ld	sp,ix
   016D DD E1               303 	pop	ix
   016F C9                  304 	ret
   0170                     305 _dequeue_remove_end::
                            306 ;queue.c:85: dequeue_insert_after (struct dequeue_hdr *list, struct dequeue_node *prev, struct dequeue_node *record)
                            307 ;	genLabel
                            308 ;	genFunction
                            309 ;	---------------------------------
                            310 ; Function dequeue_insert_after
                            311 ; ---------------------------------
   0170                     312 _dequeue_insert_after_start::
   0170                     313 _dequeue_insert_after:
   0170 DD E5               314 	push	ix
   0172 DD 21 00 00         315 	ld	ix,#0
   0176 DD 39               316 	add	ix,sp
   0178 21 FC FF            317 	ld	hl,#-4
   017B 39                  318 	add	hl,sp
   017C F9                  319 	ld	sp,hl
                            320 ;queue.c:89: dequeue_check (list);
                            321 ;	genIpush
                            322 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
                            323 ;	AOP_STK for 
   017D DD 6E 04            324 	ld	l,4(ix)
   0180 DD 66 05            325 	ld	h,5(ix)
   0183 E5                  326 	push	hl
                            327 ;	genCall
   0184 CDr00s00            328 	call	_dequeue_check
   0187 F1                  329 	pop	af
                            330 ;queue.c:90: record->prev = prev;
                            331 ;	genAssign
                            332 ;	AOP_STK for 
                            333 ;	AOP_STK for _dequeue_insert_after_sloc0_1_0
   0188 DD 7E 08            334 	ld	a,8(ix)
   018B DD 77 FE            335 	ld	-2(ix),a
   018E DD 7E 09            336 	ld	a,9(ix)
   0191 DD 77 FF            337 	ld	-1(ix),a
                            338 ;	genAssign (pointer)
                            339 ;	AOP_STK for _dequeue_insert_after_sloc0_1_0
                            340 ;	AOP_STK for 
                            341 ;	isBitvar = 0
   0194 DD 6E FE            342 	ld	l,-2(ix)
   0197 DD 66 FF            343 	ld	h,-1(ix)
   019A DD 7E 06            344 	ld	a,6(ix)
   019D 77                  345 	ld	(hl),a
   019E 23                  346 	inc	hl
   019F DD 7E 07            347 	ld	a,7(ix)
   01A2 77                  348 	ld	(hl),a
                            349 ;queue.c:91: if (prev == NULL) {
                            350 ;	genCmpEq
                            351 ;	AOP_STK for 
                            352 ; genCmpEq: left 2, right 2, result 0
   01A3 DD 7E 06            353 	ld	a,6(ix)
   01A6 DD B6 07            354 	or	a,7(ix)
   01A9 CArAFs01            355 	jp	z,00115$
   01AC                     356 00114$:
   01AC C3rCDs01            357 	jp	00102$
   01AF                     358 00115$:
                            359 ;queue.c:92: next = list->first;
                            360 ;	genAssign
                            361 ;	AOP_STK for 
   01AF DD 4E 04            362 	ld	c,4(ix)
   01B2 DD 46 05            363 	ld	b,5(ix)
   01B5 C5                  364 	push	bc
   01B6 FD E1               365 	pop	iy
                            366 ;	genPointerGet
   01B8 FD 5E 00            367 	ld	e,0(iy)
   01BB FD 56 01            368 	ld	d,1(iy)
                            369 ;	genAssign
                            370 ;	(registers are the same)
                            371 ;queue.c:93: list->first = record;
                            372 ;	genAssign (pointer)
                            373 ;	AOP_STK for _dequeue_insert_after_sloc0_1_0
                            374 ;	isBitvar = 0
   01BE DD 7E FE            375 	ld	a,-2(ix)
   01C1 FD 77 00            376 	ld	0(iy),a
   01C4 DD 7E FF            377 	ld	a,-1(ix)
   01C7 FD 77 01            378 	ld	1(iy),a
                            379 ;	genGoto
   01CA C3rF9s01            380 	jp	00103$
                            381 ;	genLabel
   01CD                     382 00102$:
                            383 ;queue.c:95: next = prev->next;
                            384 ;	genAssign
                            385 ;	AOP_STK for 
   01CD DD 4E 06            386 	ld	c,6(ix)
   01D0 DD 46 07            387 	ld	b,7(ix)
                            388 ;	genPlus
                            389 ;	AOP_STK for _dequeue_insert_after_sloc1_1_0
                            390 ;	genPlusIncr
                            391 ;	Can't optimise plus by inc, falling back to the normal way
   01D3 79                  392 	ld	a,c
   01D4 C6 02               393 	add	a,#0x02
   01D6 DD 77 FC            394 	ld	-4(ix),a
   01D9 78                  395 	ld	a,b
   01DA CE 00               396 	adc	a,#0x00
   01DC DD 77 FD            397 	ld	-3(ix),a
                            398 ;	genPointerGet
                            399 ;	AOP_STK for _dequeue_insert_after_sloc1_1_0
   01DF DD 6E FC            400 	ld	l,-4(ix)
   01E2 DD 66 FD            401 	ld	h,-3(ix)
   01E5 4E                  402 	ld	c,(hl)
   01E6 23                  403 	inc	hl
   01E7 46                  404 	ld	b,(hl)
                            405 ;	genAssign
   01E8 59                  406 	ld	e,c
   01E9 50                  407 	ld	d,b
                            408 ;queue.c:96: prev->next = record;
                            409 ;	genAssign (pointer)
                            410 ;	AOP_STK for _dequeue_insert_after_sloc1_1_0
                            411 ;	AOP_STK for _dequeue_insert_after_sloc0_1_0
                            412 ;	isBitvar = 0
   01EA DD 6E FC            413 	ld	l,-4(ix)
   01ED DD 66 FD            414 	ld	h,-3(ix)
   01F0 DD 7E FE            415 	ld	a,-2(ix)
   01F3 77                  416 	ld	(hl),a
   01F4 23                  417 	inc	hl
   01F5 DD 7E FF            418 	ld	a,-1(ix)
   01F8 77                  419 	ld	(hl),a
                            420 ;	genLabel
   01F9                     421 00103$:
                            422 ;queue.c:98: record->next = next;
                            423 ;	genPlus
                            424 ;	AOP_STK for _dequeue_insert_after_sloc0_1_0
                            425 ;	genPlusIncr
   01F9 DD 4E FE            426 	ld	c,-2(ix)
   01FC DD 46 FF            427 	ld	b,-1(ix)
   01FF 03                  428 	inc	bc
   0200 03                  429 	inc	bc
                            430 ;	genAssign (pointer)
                            431 ;	isBitvar = 0
   0201 69                  432 	ld	l,c
   0202 60                  433 	ld	h,b
   0203 73                  434 	ld	(hl),e
   0204 23                  435 	inc	hl
   0205 72                  436 	ld	(hl),d
                            437 ;queue.c:99: if (next == NULL)
                            438 ;	genCmpEq
                            439 ; genCmpEq: left 2, right 2, result 0
   0206 7B                  440 	ld	a,e
   0207 B2                  441 	or	a,d
   0208 CAr0Es02            442 	jp	z,00117$
   020B                     443 00116$:
   020B C3r24s02            444 	jp	00105$
   020E                     445 00117$:
                            446 ;queue.c:100: list->last = record;
                            447 ;	genAssign
                            448 ;	AOP_STK for 
   020E DD 4E 04            449 	ld	c,4(ix)
   0211 DD 46 05            450 	ld	b,5(ix)
                            451 ;	genPlus
                            452 ;	genPlusIncr
   0214 03                  453 	inc	bc
   0215 03                  454 	inc	bc
                            455 ;	genAssign (pointer)
                            456 ;	AOP_STK for _dequeue_insert_after_sloc0_1_0
                            457 ;	isBitvar = 0
   0216 69                  458 	ld	l,c
   0217 60                  459 	ld	h,b
   0218 DD 7E FE            460 	ld	a,-2(ix)
   021B 77                  461 	ld	(hl),a
   021C 23                  462 	inc	hl
   021D DD 7E FF            463 	ld	a,-1(ix)
   0220 77                  464 	ld	(hl),a
                            465 ;	genGoto
   0221 C3r2Fs02            466 	jp	00106$
                            467 ;	genLabel
   0224                     468 00105$:
                            469 ;queue.c:102: next->prev = record;
                            470 ;	genAssign (pointer)
                            471 ;	AOP_STK for _dequeue_insert_after_sloc0_1_0
                            472 ;	isBitvar = 0
   0224 6B                  473 	ld	l,e
   0225 62                  474 	ld	h,d
   0226 DD 7E FE            475 	ld	a,-2(ix)
   0229 77                  476 	ld	(hl),a
   022A 23                  477 	inc	hl
   022B DD 7E FF            478 	ld	a,-1(ix)
   022E 77                  479 	ld	(hl),a
                            480 ;	genLabel
   022F                     481 00106$:
                            482 ;queue.c:103: if (list->first == NULL)
                            483 ;	genAssign
                            484 ;	AOP_STK for 
   022F DD 4E 04            485 	ld	c,4(ix)
   0232 DD 46 05            486 	ld	b,5(ix)
                            487 ;	genPointerGet
   0235 69                  488 	ld	l,c
   0236 60                  489 	ld	h,b
   0237 5E                  490 	ld	e,(hl)
   0238 23                  491 	inc	hl
   0239 56                  492 	ld	d,(hl)
                            493 ;	genCmpEq
                            494 ; genCmpEq: left 2, right 2, result 0
   023A 7B                  495 	ld	a,e
   023B B2                  496 	or	a,d
   023C CAr42s02            497 	jp	z,00119$
   023F                     498 00118$:
   023F C3r4Ds02            499 	jp	00108$
   0242                     500 00119$:
                            501 ;queue.c:104: list->first = record;
                            502 ;	genAssign (pointer)
                            503 ;	AOP_STK for _dequeue_insert_after_sloc0_1_0
                            504 ;	isBitvar = 0
   0242 69                  505 	ld	l,c
   0243 60                  506 	ld	h,b
   0244 DD 7E FE            507 	ld	a,-2(ix)
   0247 77                  508 	ld	(hl),a
   0248 23                  509 	inc	hl
   0249 DD 7E FF            510 	ld	a,-1(ix)
   024C 77                  511 	ld	(hl),a
                            512 ;	genLabel
   024D                     513 00108$:
                            514 ;queue.c:105: dequeue_check (list);
                            515 ;	genIpush
                            516 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
   024D C5                  517 	push	bc
                            518 ;	genCall
   024E CDr00s00            519 	call	_dequeue_check
   0251 F1                  520 	pop	af
                            521 ;	genLabel
   0252                     522 00109$:
                            523 ;	genEndFunction
   0252 DD F9               524 	ld	sp,ix
   0254 DD E1               525 	pop	ix
   0256 C9                  526 	ret
   0257                     527 _dequeue_insert_after_end::
                            528 ;queue.c:111: dequeue_push (struct dequeue_hdr *list, struct dequeue_node *record)
                            529 ;	genLabel
                            530 ;	genFunction
                            531 ;	---------------------------------
                            532 ; Function dequeue_push
                            533 ; ---------------------------------
   0257                     534 _dequeue_push_start::
   0257                     535 _dequeue_push:
   0257 DD E5               536 	push	ix
   0259 DD 21 00 00         537 	ld	ix,#0
   025D DD 39               538 	add	ix,sp
   025F 21 FA FF            539 	ld	hl,#-6
   0262 39                  540 	add	hl,sp
   0263 F9                  541 	ld	sp,hl
                            542 ;queue.c:113: dequeue_check (list);
                            543 ;	genIpush
                            544 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
                            545 ;	AOP_STK for 
   0264 DD 6E 04            546 	ld	l,4(ix)
   0267 DD 66 05            547 	ld	h,5(ix)
   026A E5                  548 	push	hl
                            549 ;	genCall
   026B CDr00s00            550 	call	_dequeue_check
   026E F1                  551 	pop	af
                            552 ;queue.c:114: record->prev = list->last;
                            553 ;	genAssign
                            554 ;	AOP_STK for 
   026F DD 4E 06            555 	ld	c,6(ix)
   0272 DD 46 07            556 	ld	b,7(ix)
                            557 ;	genAssign
                            558 ;	AOP_STK for 
                            559 ;	AOP_STK for _dequeue_push_sloc1_1_0
   0275 DD 7E 04            560 	ld	a,4(ix)
   0278 DD 77 FC            561 	ld	-4(ix),a
   027B DD 7E 05            562 	ld	a,5(ix)
   027E DD 77 FD            563 	ld	-3(ix),a
                            564 ;	genPlus
                            565 ;	AOP_STK for _dequeue_push_sloc1_1_0
                            566 ;	AOP_STK for _dequeue_push_sloc0_1_0
                            567 ;	genPlusIncr
                            568 ;	Can't optimise plus by inc, falling back to the normal way
   0281 DD 7E FC            569 	ld	a,-4(ix)
   0284 C6 02               570 	add	a,#0x02
   0286 DD 77 FE            571 	ld	-2(ix),a
   0289 DD 7E FD            572 	ld	a,-3(ix)
   028C CE 00               573 	adc	a,#0x00
   028E DD 77 FF            574 	ld	-1(ix),a
                            575 ;	genPointerGet
                            576 ;	AOP_STK for _dequeue_push_sloc0_1_0
                            577 ;	AOP_STK for _dequeue_push_sloc2_1_0
   0291 DD 6E FE            578 	ld	l,-2(ix)
   0294 DD 66 FF            579 	ld	h,-1(ix)
   0297 7E                  580 	ld	a,(hl)
   0298 DD 77 FA            581 	ld	-6(ix),a
   029B 23                  582 	inc	hl
   029C 7E                  583 	ld	a,(hl)
   029D DD 77 FB            584 	ld	-5(ix),a
                            585 ;	genAssign (pointer)
                            586 ;	AOP_STK for _dequeue_push_sloc2_1_0
                            587 ;	isBitvar = 0
   02A0 69                  588 	ld	l,c
   02A1 60                  589 	ld	h,b
   02A2 DD 7E FA            590 	ld	a,-6(ix)
   02A5 77                  591 	ld	(hl),a
   02A6 23                  592 	inc	hl
   02A7 DD 7E FB            593 	ld	a,-5(ix)
   02AA 77                  594 	ld	(hl),a
                            595 ;queue.c:115: record->next = NULL;
                            596 ;	genPlus
                            597 ;	genPlusIncr
   02AB 59                  598 	ld	e,c
   02AC 50                  599 	ld	d,b
   02AD 13                  600 	inc	de
   02AE 13                  601 	inc	de
                            602 ;	genAssign (pointer)
                            603 ;	isBitvar = 0
   02AF 6B                  604 	ld	l,e
   02B0 62                  605 	ld	h,d
   02B1 36 00               606 	ld	(hl),#0x00
   02B3 23                  607 	inc	hl
   02B4 36 00               608 	ld	(hl),#0x00
                            609 ;queue.c:116: if (record->prev == NULL)
                            610 ;	genCmpEq
                            611 ;	AOP_STK for _dequeue_push_sloc2_1_0
                            612 ; genCmpEq: left 2, right 2, result 0
   02B6 DD 7E FA            613 	ld	a,-6(ix)
   02B9 DD B6 FB            614 	or	a,-5(ix)
   02BC CArC2s02            615 	jp	z,00108$
   02BF                     616 00107$:
   02BF C3rCEs02            617 	jp	00102$
   02C2                     618 00108$:
                            619 ;queue.c:117: list->first = record;
                            620 ;	genAssign (pointer)
                            621 ;	AOP_STK for _dequeue_push_sloc1_1_0
                            622 ;	isBitvar = 0
   02C2 DD 6E FC            623 	ld	l,-4(ix)
   02C5 DD 66 FD            624 	ld	h,-3(ix)
   02C8 71                  625 	ld	(hl),c
   02C9 23                  626 	inc	hl
   02CA 70                  627 	ld	(hl),b
                            628 ;	genGoto
   02CB C3rDAs02            629 	jp	00103$
                            630 ;	genLabel
   02CE                     631 00102$:
                            632 ;queue.c:119: record->prev->next = record;
                            633 ;	genPointerGet
   02CE 69                  634 	ld	l,c
   02CF 60                  635 	ld	h,b
   02D0 5E                  636 	ld	e,(hl)
   02D1 23                  637 	inc	hl
   02D2 56                  638 	ld	d,(hl)
                            639 ;	genPlus
                            640 ;	genPlusIncr
   02D3 13                  641 	inc	de
   02D4 13                  642 	inc	de
                            643 ;	genAssign (pointer)
                            644 ;	isBitvar = 0
   02D5 6B                  645 	ld	l,e
   02D6 62                  646 	ld	h,d
   02D7 71                  647 	ld	(hl),c
   02D8 23                  648 	inc	hl
   02D9 70                  649 	ld	(hl),b
                            650 ;	genLabel
   02DA                     651 00103$:
                            652 ;queue.c:120: list->last = record;
                            653 ;	genAssign (pointer)
                            654 ;	AOP_STK for _dequeue_push_sloc0_1_0
                            655 ;	isBitvar = 0
   02DA DD 6E FE            656 	ld	l,-2(ix)
   02DD DD 66 FF            657 	ld	h,-1(ix)
   02E0 71                  658 	ld	(hl),c
   02E1 23                  659 	inc	hl
   02E2 70                  660 	ld	(hl),b
                            661 ;queue.c:121: dequeue_check (list);
                            662 ;	genIpush
                            663 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
                            664 ;	AOP_STK for _dequeue_push_sloc1_1_0
   02E3 DD 6E FC            665 	ld	l,-4(ix)
   02E6 DD 66 FD            666 	ld	h,-3(ix)
   02E9 E5                  667 	push	hl
                            668 ;	genCall
   02EA CDr00s00            669 	call	_dequeue_check
   02ED F1                  670 	pop	af
                            671 ;	genLabel
   02EE                     672 00104$:
                            673 ;	genEndFunction
   02EE DD F9               674 	ld	sp,ix
   02F0 DD E1               675 	pop	ix
   02F2 C9                  676 	ret
   02F3                     677 _dequeue_push_end::
                            678 ;queue.c:125: dequeue_push_front (struct dequeue_hdr *list, struct dequeue_node *record)
                            679 ;	genLabel
                            680 ;	genFunction
                            681 ;	---------------------------------
                            682 ; Function dequeue_push_front
                            683 ; ---------------------------------
   02F3                     684 _dequeue_push_front_start::
   02F3                     685 _dequeue_push_front:
   02F3 DD E5               686 	push	ix
   02F5 DD 21 00 00         687 	ld	ix,#0
   02F9 DD 39               688 	add	ix,sp
   02FB 21 FC FF            689 	ld	hl,#-4
   02FE 39                  690 	add	hl,sp
   02FF F9                  691 	ld	sp,hl
                            692 ;queue.c:127: dequeue_check (list);
                            693 ;	genIpush
                            694 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
                            695 ;	AOP_STK for 
   0300 DD 6E 04            696 	ld	l,4(ix)
   0303 DD 66 05            697 	ld	h,5(ix)
   0306 E5                  698 	push	hl
                            699 ;	genCall
   0307 CDr00s00            700 	call	_dequeue_check
   030A F1                  701 	pop	af
                            702 ;queue.c:128: record->next = list->first;
                            703 ;	genAssign
                            704 ;	AOP_STK for 
   030B DD 4E 06            705 	ld	c,6(ix)
   030E DD 46 07            706 	ld	b,7(ix)
                            707 ;	genPlus
                            708 ;	AOP_STK for _dequeue_push_front_sloc1_1_0
                            709 ;	genPlusIncr
                            710 ;	Can't optimise plus by inc, falling back to the normal way
   0311 79                  711 	ld	a,c
   0312 C6 02               712 	add	a,#0x02
   0314 DD 77 FC            713 	ld	-4(ix),a
   0317 78                  714 	ld	a,b
   0318 CE 00               715 	adc	a,#0x00
   031A DD 77 FD            716 	ld	-3(ix),a
                            717 ;	genAssign
                            718 ;	AOP_STK for 
                            719 ;	AOP_STK for _dequeue_push_front_sloc0_1_0
   031D DD 7E 04            720 	ld	a,4(ix)
   0320 DD 77 FE            721 	ld	-2(ix),a
   0323 DD 7E 05            722 	ld	a,5(ix)
   0326 DD 77 FF            723 	ld	-1(ix),a
                            724 ;	genPointerGet
                            725 ;	AOP_STK for _dequeue_push_front_sloc0_1_0
   0329 DD 6E FE            726 	ld	l,-2(ix)
   032C DD 66 FF            727 	ld	h,-1(ix)
   032F 5E                  728 	ld	e,(hl)
   0330 23                  729 	inc	hl
   0331 56                  730 	ld	d,(hl)
                            731 ;	genAssign (pointer)
                            732 ;	AOP_STK for _dequeue_push_front_sloc1_1_0
                            733 ;	isBitvar = 0
   0332 DD 6E FC            734 	ld	l,-4(ix)
   0335 DD 66 FD            735 	ld	h,-3(ix)
   0338 73                  736 	ld	(hl),e
   0339 23                  737 	inc	hl
   033A 72                  738 	ld	(hl),d
                            739 ;queue.c:129: record->prev = NULL;
                            740 ;	genAssign (pointer)
                            741 ;	isBitvar = 0
   033B 69                  742 	ld	l,c
   033C 60                  743 	ld	h,b
   033D 36 00               744 	ld	(hl),#0x00
   033F 23                  745 	inc	hl
   0340 36 00               746 	ld	(hl),#0x00
                            747 ;queue.c:130: if (list->first == NULL)
                            748 ;	genCmpEq
                            749 ; genCmpEq: left 2, right 2, result 0
   0342 7B                  750 	ld	a,e
   0343 B2                  751 	or	a,d
   0344 CAr4As03            752 	jp	z,00108$
   0347                     753 00107$:
   0347 C3r5As03            754 	jp	00102$
   034A                     755 00108$:
                            756 ;queue.c:131: list->last = record;
                            757 ;	genPlus
                            758 ;	AOP_STK for _dequeue_push_front_sloc0_1_0
                            759 ;	genPlusIncr
   034A DD 5E FE            760 	ld	e,-2(ix)
   034D DD 56 FF            761 	ld	d,-1(ix)
   0350 13                  762 	inc	de
   0351 13                  763 	inc	de
                            764 ;	genAssign (pointer)
                            765 ;	isBitvar = 0
   0352 6B                  766 	ld	l,e
   0353 62                  767 	ld	h,d
   0354 71                  768 	ld	(hl),c
   0355 23                  769 	inc	hl
   0356 70                  770 	ld	(hl),b
                            771 ;	genGoto
   0357 C3r68s03            772 	jp	00103$
                            773 ;	genLabel
   035A                     774 00102$:
                            775 ;queue.c:133: list->first->prev = record;
                            776 ;	genPointerGet
                            777 ;	AOP_STK for _dequeue_push_front_sloc0_1_0
   035A DD 6E FE            778 	ld	l,-2(ix)
   035D DD 66 FF            779 	ld	h,-1(ix)
   0360 5E                  780 	ld	e,(hl)
   0361 23                  781 	inc	hl
   0362 56                  782 	ld	d,(hl)
                            783 ;	genAssign (pointer)
                            784 ;	isBitvar = 0
   0363 6B                  785 	ld	l,e
   0364 62                  786 	ld	h,d
   0365 71                  787 	ld	(hl),c
   0366 23                  788 	inc	hl
   0367 70                  789 	ld	(hl),b
                            790 ;	genLabel
   0368                     791 00103$:
                            792 ;queue.c:134: list->first = record;
                            793 ;	genAssign (pointer)
                            794 ;	AOP_STK for _dequeue_push_front_sloc0_1_0
                            795 ;	isBitvar = 0
   0368 DD 6E FE            796 	ld	l,-2(ix)
   036B DD 66 FF            797 	ld	h,-1(ix)
   036E 71                  798 	ld	(hl),c
   036F 23                  799 	inc	hl
   0370 70                  800 	ld	(hl),b
                            801 ;queue.c:135: dequeue_check (list);
                            802 ;	genIpush
                            803 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
                            804 ;	AOP_STK for _dequeue_push_front_sloc0_1_0
   0371 DD 6E FE            805 	ld	l,-2(ix)
   0374 DD 66 FF            806 	ld	h,-1(ix)
   0377 E5                  807 	push	hl
                            808 ;	genCall
   0378 CDr00s00            809 	call	_dequeue_check
   037B F1                  810 	pop	af
                            811 ;	genLabel
   037C                     812 00104$:
                            813 ;	genEndFunction
   037C DD F9               814 	ld	sp,ix
   037E DD E1               815 	pop	ix
   0380 C9                  816 	ret
   0381                     817 _dequeue_push_front_end::
                            818 ;queue.c:139: dequeue_pop (struct dequeue_hdr *list, struct dequeue_node **record)
                            819 ;	genLabel
                            820 ;	genFunction
                            821 ;	---------------------------------
                            822 ; Function dequeue_pop
                            823 ; ---------------------------------
   0381                     824 _dequeue_pop_start::
   0381                     825 _dequeue_pop:
   0381 DD E5               826 	push	ix
   0383 DD 21 00 00         827 	ld	ix,#0
   0387 DD 39               828 	add	ix,sp
   0389 21 FC FF            829 	ld	hl,#-4
   038C 39                  830 	add	hl,sp
   038D F9                  831 	ld	sp,hl
                            832 ;queue.c:143: dequeue_check (list);
                            833 ;	genIpush
                            834 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
                            835 ;	AOP_STK for 
   038E DD 6E 04            836 	ld	l,4(ix)
   0391 DD 66 05            837 	ld	h,5(ix)
   0394 E5                  838 	push	hl
                            839 ;	genCall
   0395 CDr00s00            840 	call	_dequeue_check
   0398 F1                  841 	pop	af
                            842 ;queue.c:144: rec = list->last;
                            843 ;	genAssign
                            844 ;	AOP_STK for 
   0399 DD 4E 04            845 	ld	c,4(ix)
   039C DD 46 05            846 	ld	b,5(ix)
                            847 ;	genPlus
                            848 ;	AOP_STK for _dequeue_pop_sloc0_1_0
                            849 ;	genPlusIncr
                            850 ;	Can't optimise plus by inc, falling back to the normal way
   039F 79                  851 	ld	a,c
   03A0 C6 02               852 	add	a,#0x02
   03A2 DD 77 FE            853 	ld	-2(ix),a
   03A5 78                  854 	ld	a,b
   03A6 CE 00               855 	adc	a,#0x00
   03A8 DD 77 FF            856 	ld	-1(ix),a
                            857 ;	genPointerGet
                            858 ;	AOP_STK for _dequeue_pop_sloc0_1_0
   03AB DD 6E FE            859 	ld	l,-2(ix)
   03AE DD 66 FF            860 	ld	h,-1(ix)
   03B1 5E                  861 	ld	e,(hl)
   03B2 23                  862 	inc	hl
   03B3 56                  863 	ld	d,(hl)
                            864 ;	genAssign
                            865 ;	(registers are the same)
                            866 ;queue.c:145: *record = rec;
                            867 ;	genAssign
                            868 ;	AOP_STK for 
   03B4 E5                  869 	push	hl
   03B5 DD 6E 06            870 	ld	l,6(ix)
   03B8 DD 66 07            871 	ld	h,7(ix)
   03BB E5                  872 	push	hl
   03BC FD E1               873 	pop	iy
   03BE E1                  874 	pop	hl
                            875 ;	genAssign (pointer)
                            876 ;	isBitvar = 0
   03BF FD 73 00            877 	ld	0(iy),e
   03C2 FD 72 01            878 	ld	1(iy),d
                            879 ;queue.c:146: if (rec == NULL)
                            880 ;	genCmpEq
                            881 ; genCmpEq: left 2, right 2, result 0
   03C5 7B                  882 	ld	a,e
   03C6 B2                  883 	or	a,d
   03C7 CAr06s04            884 	jp	z,00106$
   03CA                     885 00111$:
                            886 ;queue.c:149: if (rec->prev != NULL)
                            887 ;	genPointerGet
                            888 ;	AOP_STK for _dequeue_pop_sloc1_1_0
   03CA 6B                  889 	ld	l,e
   03CB 62                  890 	ld	h,d
   03CC 7E                  891 	ld	a,(hl)
   03CD DD 77 FC            892 	ld	-4(ix),a
   03D0 23                  893 	inc	hl
   03D1 7E                  894 	ld	a,(hl)
   03D2 DD 77 FD            895 	ld	-3(ix),a
                            896 ;	genCmpEq
                            897 ;	AOP_STK for _dequeue_pop_sloc1_1_0
                            898 ; genCmpEq: left 2, right 2, result 0
   03D5 DD 7E FC            899 	ld	a,-4(ix)
   03D8 DD B6 FD            900 	or	a,-3(ix)
   03DB CArF0s03            901 	jp	z,00104$
   03DE                     902 00112$:
                            903 ;queue.c:150: rec->prev->next = NULL;
                            904 ;	genPlus
                            905 ;	AOP_STK for _dequeue_pop_sloc1_1_0
                            906 ;	genPlusIncr
   03DE DD 5E FC            907 	ld	e,-4(ix)
   03E1 DD 56 FD            908 	ld	d,-3(ix)
   03E4 13                  909 	inc	de
   03E5 13                  910 	inc	de
                            911 ;	genAssign (pointer)
                            912 ;	isBitvar = 0
   03E6 6B                  913 	ld	l,e
   03E7 62                  914 	ld	h,d
   03E8 36 00               915 	ld	(hl),#0x00
   03EA 23                  916 	inc	hl
   03EB 36 00               917 	ld	(hl),#0x00
                            918 ;	genGoto
   03ED C3rF7s03            919 	jp	00105$
                            920 ;	genLabel
   03F0                     921 00104$:
                            922 ;queue.c:152: list->first = NULL;
                            923 ;	genAssign (pointer)
                            924 ;	isBitvar = 0
   03F0 69                  925 	ld	l,c
   03F1 60                  926 	ld	h,b
   03F2 36 00               927 	ld	(hl),#0x00
   03F4 23                  928 	inc	hl
   03F5 36 00               929 	ld	(hl),#0x00
                            930 ;	genLabel
   03F7                     931 00105$:
                            932 ;queue.c:153: list->last = rec->prev;
                            933 ;	genAssign (pointer)
                            934 ;	AOP_STK for _dequeue_pop_sloc0_1_0
                            935 ;	AOP_STK for _dequeue_pop_sloc1_1_0
                            936 ;	isBitvar = 0
   03F7 DD 6E FE            937 	ld	l,-2(ix)
   03FA DD 66 FF            938 	ld	h,-1(ix)
   03FD DD 7E FC            939 	ld	a,-4(ix)
   0400 77                  940 	ld	(hl),a
   0401 23                  941 	inc	hl
   0402 DD 7E FD            942 	ld	a,-3(ix)
   0405 77                  943 	ld	(hl),a
                            944 ;queue.c:155: end:
                            945 ;	genLabel
   0406                     946 00106$:
                            947 ;queue.c:156: dequeue_check (list);
                            948 ;	genIpush
                            949 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
   0406 C5                  950 	push	bc
                            951 ;	genCall
   0407 CDr00s00            952 	call	_dequeue_check
   040A F1                  953 	pop	af
                            954 ;	genLabel
   040B                     955 00107$:
                            956 ;	genEndFunction
   040B DD F9               957 	ld	sp,ix
   040D DD E1               958 	pop	ix
   040F C9                  959 	ret
   0410                     960 _dequeue_pop_end::
                            961 ;queue.c:160: dequeue_pop_front (struct dequeue_hdr *list, struct dequeue_node **record)
                            962 ;	genLabel
                            963 ;	genFunction
                            964 ;	---------------------------------
                            965 ; Function dequeue_pop_front
                            966 ; ---------------------------------
   0410                     967 _dequeue_pop_front_start::
   0410                     968 _dequeue_pop_front:
   0410 DD E5               969 	push	ix
   0412 DD 21 00 00         970 	ld	ix,#0
   0416 DD 39               971 	add	ix,sp
   0418 21 FE FF            972 	ld	hl,#-2
   041B 39                  973 	add	hl,sp
   041C F9                  974 	ld	sp,hl
                            975 ;queue.c:164: dequeue_check (list);
                            976 ;	genIpush
                            977 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
                            978 ;	AOP_STK for 
   041D DD 6E 04            979 	ld	l,4(ix)
   0420 DD 66 05            980 	ld	h,5(ix)
   0423 E5                  981 	push	hl
                            982 ;	genCall
   0424 CDr00s00            983 	call	_dequeue_check
   0427 F1                  984 	pop	af
                            985 ;queue.c:165: rec = list->first;
                            986 ;	genAssign
                            987 ;	AOP_STK for 
   0428 DD 4E 04            988 	ld	c,4(ix)
   042B DD 46 05            989 	ld	b,5(ix)
                            990 ;	genPointerGet
   042E 69                  991 	ld	l,c
   042F 60                  992 	ld	h,b
   0430 5E                  993 	ld	e,(hl)
   0431 23                  994 	inc	hl
   0432 56                  995 	ld	d,(hl)
                            996 ;	genAssign
                            997 ;	(registers are the same)
                            998 ;queue.c:166: *record = rec;
                            999 ;	genAssign
                           1000 ;	AOP_STK for 
   0433 E5                 1001 	push	hl
   0434 DD 6E 06           1002 	ld	l,6(ix)
   0437 DD 66 07           1003 	ld	h,7(ix)
   043A E5                 1004 	push	hl
   043B FD E1              1005 	pop	iy
   043D E1                 1006 	pop	hl
                           1007 ;	genAssign (pointer)
                           1008 ;	isBitvar = 0
   043E FD 73 00           1009 	ld	0(iy),e
   0441 FD 72 01           1010 	ld	1(iy),d
                           1011 ;queue.c:167: if (rec == NULL)
                           1012 ;	genCmpEq
                           1013 ; genCmpEq: left 2, right 2, result 0
   0444 7B                 1014 	ld	a,e
   0445 B2                 1015 	or	a,d
   0446 CAr84s04           1016 	jp	z,00106$
   0449                    1017 00111$:
                           1018 ;queue.c:170: if (rec->next != NULL)
                           1019 ;	genPlus
                           1020 ;	genPlusIncr
   0449 13                 1021 	inc	de
   044A 13                 1022 	inc	de
                           1023 ;	genPointerGet
                           1024 ;	AOP_STK for _dequeue_pop_front_sloc0_1_0
   044B 6B                 1025 	ld	l,e
   044C 62                 1026 	ld	h,d
   044D 7E                 1027 	ld	a,(hl)
   044E DD 77 FE           1028 	ld	-2(ix),a
   0451 23                 1029 	inc	hl
   0452 7E                 1030 	ld	a,(hl)
   0453 DD 77 FF           1031 	ld	-1(ix),a
                           1032 ;	genCmpEq
                           1033 ;	AOP_STK for _dequeue_pop_front_sloc0_1_0
                           1034 ; genCmpEq: left 2, right 2, result 0
   0456 DD 7E FE           1035 	ld	a,-2(ix)
   0459 DD B6 FF           1036 	or	a,-1(ix)
   045C CAr6Es04           1037 	jp	z,00104$
   045F                    1038 00112$:
                           1039 ;queue.c:171: rec->next->prev = NULL;
                           1040 ;	genPointerGet
   045F 6B                 1041 	ld	l,e
   0460 62                 1042 	ld	h,d
   0461 5E                 1043 	ld	e,(hl)
   0462 23                 1044 	inc	hl
   0463 56                 1045 	ld	d,(hl)
                           1046 ;	genAssign (pointer)
                           1047 ;	isBitvar = 0
   0464 6B                 1048 	ld	l,e
   0465 62                 1049 	ld	h,d
   0466 36 00              1050 	ld	(hl),#0x00
   0468 23                 1051 	inc	hl
   0469 36 00              1052 	ld	(hl),#0x00
                           1053 ;	genGoto
   046B C3r79s04           1054 	jp	00105$
                           1055 ;	genLabel
   046E                    1056 00104$:
                           1057 ;queue.c:173: list->last = NULL;
                           1058 ;	genPlus
                           1059 ;	genPlusIncr
   046E 59                 1060 	ld	e,c
   046F 50                 1061 	ld	d,b
   0470 13                 1062 	inc	de
   0471 13                 1063 	inc	de
                           1064 ;	genAssign (pointer)
                           1065 ;	isBitvar = 0
   0472 6B                 1066 	ld	l,e
   0473 62                 1067 	ld	h,d
   0474 36 00              1068 	ld	(hl),#0x00
   0476 23                 1069 	inc	hl
   0477 36 00              1070 	ld	(hl),#0x00
                           1071 ;	genLabel
   0479                    1072 00105$:
                           1073 ;queue.c:174: list->first = rec->next;
                           1074 ;	genAssign (pointer)
                           1075 ;	AOP_STK for _dequeue_pop_front_sloc0_1_0
                           1076 ;	isBitvar = 0
   0479 69                 1077 	ld	l,c
   047A 60                 1078 	ld	h,b
   047B DD 7E FE           1079 	ld	a,-2(ix)
   047E 77                 1080 	ld	(hl),a
   047F 23                 1081 	inc	hl
   0480 DD 7E FF           1082 	ld	a,-1(ix)
   0483 77                 1083 	ld	(hl),a
                           1084 ;queue.c:176: end:
                           1085 ;	genLabel
   0484                    1086 00106$:
                           1087 ;queue.c:177: dequeue_check (list);
                           1088 ;	genIpush
                           1089 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
   0484 C5                 1090 	push	bc
                           1091 ;	genCall
   0485 CDr00s00           1092 	call	_dequeue_check
   0488 F1                 1093 	pop	af
                           1094 ;	genLabel
   0489                    1095 00107$:
                           1096 ;	genEndFunction
   0489 DD F9              1097 	ld	sp,ix
   048B DD E1              1098 	pop	ix
   048D C9                 1099 	ret
   048E                    1100 _dequeue_pop_front_end::
                           1101 ;queue.c:184: clist_remove (struct dequeue_hdr *list, struct dequeue_node *record)
                           1102 ;	genLabel
                           1103 ;	genFunction
                           1104 ;	---------------------------------
                           1105 ; Function clist_remove
                           1106 ; ---------------------------------
   048E                    1107 _clist_remove_start::
   048E                    1108 _clist_remove:
   048E DD E5              1109 	push	ix
   0490 DD 21 00 00        1110 	ld	ix,#0
   0494 DD 39              1111 	add	ix,sp
   0496 21 F4 FF           1112 	ld	hl,#-12
   0499 39                 1113 	add	hl,sp
   049A F9                 1114 	ld	sp,hl
                           1115 ;queue.c:186: struct dequeue_node *p = record->prev;
                           1116 ;	genAssign
                           1117 ;	AOP_STK for 
   049B DD 4E 06           1118 	ld	c,6(ix)
   049E DD 46 07           1119 	ld	b,7(ix)
                           1120 ;	genPointerGet
                           1121 ;	AOP_STK for _clist_remove_p_1_1
   04A1 69                 1122 	ld	l,c
   04A2 60                 1123 	ld	h,b
   04A3 7E                 1124 	ld	a,(hl)
   04A4 DD 77 FE           1125 	ld	-2(ix),a
   04A7 23                 1126 	inc	hl
   04A8 7E                 1127 	ld	a,(hl)
   04A9 DD 77 FF           1128 	ld	-1(ix),a
                           1129 ;	genAssign
                           1130 ;	AOP_STK for _clist_remove_p_1_1
                           1131 ;	AOP_STK for _clist_remove_sloc0_1_0
   04AC DD 7E FE           1132 	ld	a,-2(ix)
   04AF DD 77 FA           1133 	ld	-6(ix),a
   04B2 DD 7E FF           1134 	ld	a,-1(ix)
   04B5 DD 77 FB           1135 	ld	-5(ix),a
                           1136 ;queue.c:187: struct dequeue_node *n = record->next;
                           1137 ;	genPlus
                           1138 ;	AOP_STK for _clist_remove_sloc1_1_0
                           1139 ;	genPlusIncr
                           1140 ;	Can't optimise plus by inc, falling back to the normal way
   04B8 79                 1141 	ld	a,c
   04B9 C6 02              1142 	add	a,#0x02
   04BB DD 77 F8           1143 	ld	-8(ix),a
   04BE 78                 1144 	ld	a,b
   04BF CE 00              1145 	adc	a,#0x00
   04C1 DD 77 F9           1146 	ld	-7(ix),a
                           1147 ;	genPointerGet
                           1148 ;	AOP_STK for _clist_remove_sloc1_1_0
                           1149 ;	AOP_STK for _clist_remove_n_1_1
   04C4 DD 6E F8           1150 	ld	l,-8(ix)
   04C7 DD 66 F9           1151 	ld	h,-7(ix)
   04CA 7E                 1152 	ld	a,(hl)
   04CB DD 77 FC           1153 	ld	-4(ix),a
   04CE 23                 1154 	inc	hl
   04CF 7E                 1155 	ld	a,(hl)
   04D0 DD 77 FD           1156 	ld	-3(ix),a
                           1157 ;	genAssign
                           1158 ;	AOP_STK for _clist_remove_n_1_1
                           1159 ;	AOP_STK for _clist_remove_sloc2_1_0
   04D3 DD 7E FC           1160 	ld	a,-4(ix)
   04D6 DD 77 F6           1161 	ld	-10(ix),a
   04D9 DD 7E FD           1162 	ld	a,-3(ix)
   04DC DD 77 F7           1163 	ld	-9(ix),a
                           1164 ;queue.c:189: if (p == record) {
                           1165 ;	genCmpEq
                           1166 ;	AOP_STK for _clist_remove_sloc0_1_0
                           1167 ; genCmpEq: left 2, right 2, result 0
   04DF DD 7E FA           1168 	ld	a,-6(ix)
   04E2 B9                 1169 	cp	c
   04E3 C2rEDs04           1170 	jp	nz,00109$
   04E6 DD 7E FB           1171 	ld	a,-5(ix)
   04E9 B8                 1172 	cp	b
   04EA CArF0s04           1173 	jp	z,00110$
   04ED                    1174 00109$:
   04ED C3r25s05           1175 	jp	00102$
   04F0                    1176 00110$:
                           1177 ;queue.c:190: list->first = NULL;
                           1178 ;	genAssign
                           1179 ;	AOP_STK for 
                           1180 ;	AOP_STK for _clist_remove_sloc3_1_0
   04F0 DD 7E 04           1181 	ld	a,4(ix)
   04F3 DD 77 F4           1182 	ld	-12(ix),a
   04F6 DD 7E 05           1183 	ld	a,5(ix)
   04F9 DD 77 F5           1184 	ld	-11(ix),a
                           1185 ;	genAssign (pointer)
                           1186 ;	AOP_STK for _clist_remove_sloc3_1_0
                           1187 ;	isBitvar = 0
   04FC DD 6E F4           1188 	ld	l,-12(ix)
   04FF DD 66 F5           1189 	ld	h,-11(ix)
   0502 36 00              1190 	ld	(hl),#0x00
   0504 23                 1191 	inc	hl
   0505 36 00              1192 	ld	(hl),#0x00
                           1193 ;queue.c:191: list->last = NULL;
                           1194 ;	genPlus
                           1195 ;	AOP_STK for _clist_remove_sloc3_1_0
                           1196 ;	genPlusIncr
                           1197 ;	Can't optimise plus by inc, falling back to the normal way
   0507 DD 7E F4           1198 	ld	a,-12(ix)
   050A C6 02              1199 	add	a,#0x02
   050C DD 77 F4           1200 	ld	-12(ix),a
   050F DD 7E F5           1201 	ld	a,-11(ix)
   0512 CE 00              1202 	adc	a,#0x00
   0514 DD 77 F5           1203 	ld	-11(ix),a
                           1204 ;	genAssign (pointer)
                           1205 ;	AOP_STK for _clist_remove_sloc3_1_0
                           1206 ;	isBitvar = 0
   0517 DD 6E F4           1207 	ld	l,-12(ix)
   051A DD 66 F5           1208 	ld	h,-11(ix)
   051D 36 00              1209 	ld	(hl),#0x00
   051F 23                 1210 	inc	hl
   0520 36 00              1211 	ld	(hl),#0x00
                           1212 ;queue.c:192: return;
                           1213 ;	genRet
   0522 C3r8As05           1214 	jp	00105$
                           1215 ;	genLabel
   0525                    1216 00102$:
                           1217 ;queue.c:194: if (list->first == record) {
                           1218 ;	genAssign
                           1219 ;	AOP_STK for 
                           1220 ;	AOP_STK for _clist_remove_sloc3_1_0
   0525 DD 7E 04           1221 	ld	a,4(ix)
   0528 DD 77 F4           1222 	ld	-12(ix),a
   052B DD 7E 05           1223 	ld	a,5(ix)
   052E DD 77 F5           1224 	ld	-11(ix),a
                           1225 ;	genPointerGet
                           1226 ;	AOP_STK for _clist_remove_sloc3_1_0
   0531 DD 6E F4           1227 	ld	l,-12(ix)
   0534 DD 66 F5           1228 	ld	h,-11(ix)
   0537 5E                 1229 	ld	e,(hl)
   0538 23                 1230 	inc	hl
   0539 56                 1231 	ld	d,(hl)
                           1232 ;	genCmpEq
                           1233 ; genCmpEq: left 2, right 2, result 0
   053A 7B                 1234 	ld	a,e
   053B B9                 1235 	cp	c
   053C C2r44s05           1236 	jp	nz,00111$
   053F 7A                 1237 	ld	a,d
   0540 B8                 1238 	cp	b
   0541 CAr47s05           1239 	jp	z,00112$
   0544                    1240 00111$:
   0544 C3r56s05           1241 	jp	00104$
   0547                    1242 00112$:
                           1243 ;queue.c:195: list->first = n;
                           1244 ;	genAssign (pointer)
                           1245 ;	AOP_STK for _clist_remove_sloc3_1_0
                           1246 ;	AOP_STK for _clist_remove_sloc2_1_0
                           1247 ;	isBitvar = 0
   0547 DD 6E F4           1248 	ld	l,-12(ix)
   054A DD 66 F5           1249 	ld	h,-11(ix)
   054D DD 7E F6           1250 	ld	a,-10(ix)
   0550 77                 1251 	ld	(hl),a
   0551 23                 1252 	inc	hl
   0552 DD 7E F7           1253 	ld	a,-9(ix)
   0555 77                 1254 	ld	(hl),a
                           1255 ;	genLabel
   0556                    1256 00104$:
                           1257 ;queue.c:197: p->next = record->next;
                           1258 ;	genPlus
                           1259 ;	AOP_STK for _clist_remove_sloc0_1_0
                           1260 ;	genPlusIncr
   0556 DD 5E FA           1261 	ld	e,-6(ix)
   0559 DD 56 FB           1262 	ld	d,-5(ix)
   055C 13                 1263 	inc	de
   055D 13                 1264 	inc	de
                           1265 ;	genAssign (pointer)
                           1266 ;	AOP_STK for _clist_remove_n_1_1
                           1267 ;	isBitvar = 0
   055E 6B                 1268 	ld	l,e
   055F 62                 1269 	ld	h,d
   0560 DD 7E FC           1270 	ld	a,-4(ix)
   0563 77                 1271 	ld	(hl),a
   0564 23                 1272 	inc	hl
   0565 DD 7E FD           1273 	ld	a,-3(ix)
   0568 77                 1274 	ld	(hl),a
                           1275 ;queue.c:198: n->prev = record->prev;
                           1276 ;	genAssign (pointer)
                           1277 ;	AOP_STK for _clist_remove_sloc2_1_0
                           1278 ;	AOP_STK for _clist_remove_p_1_1
                           1279 ;	isBitvar = 0
   0569 DD 6E F6           1280 	ld	l,-10(ix)
   056C DD 66 F7           1281 	ld	h,-9(ix)
   056F DD 7E FE           1282 	ld	a,-2(ix)
   0572 77                 1283 	ld	(hl),a
   0573 23                 1284 	inc	hl
   0574 DD 7E FF           1285 	ld	a,-1(ix)
   0577 77                 1286 	ld	(hl),a
                           1287 ;queue.c:200: record->next = NULL;
                           1288 ;	genAssign (pointer)
                           1289 ;	AOP_STK for _clist_remove_sloc1_1_0
                           1290 ;	isBitvar = 0
   0578 DD 6E F8           1291 	ld	l,-8(ix)
   057B DD 66 F9           1292 	ld	h,-7(ix)
   057E 36 00              1293 	ld	(hl),#0x00
   0580 23                 1294 	inc	hl
   0581 36 00              1295 	ld	(hl),#0x00
                           1296 ;queue.c:201: record->prev = NULL;
                           1297 ;	genAssign (pointer)
                           1298 ;	isBitvar = 0
   0583 69                 1299 	ld	l,c
   0584 60                 1300 	ld	h,b
   0585 36 00              1301 	ld	(hl),#0x00
   0587 23                 1302 	inc	hl
   0588 36 00              1303 	ld	(hl),#0x00
                           1304 ;	genLabel
   058A                    1305 00105$:
                           1306 ;	genEndFunction
   058A DD F9              1307 	ld	sp,ix
   058C DD E1              1308 	pop	ix
   058E C9                 1309 	ret
   058F                    1310 _clist_remove_end::
                           1311 ;queue.c:206: clist_insert (struct dequeue_hdr *list, struct dequeue_node *record)
                           1312 ;	genLabel
                           1313 ;	genFunction
                           1314 ;	---------------------------------
                           1315 ; Function clist_insert
                           1316 ; ---------------------------------
   058F                    1317 _clist_insert_start::
   058F                    1318 _clist_insert:
   058F DD E5              1319 	push	ix
   0591 DD 21 00 00        1320 	ld	ix,#0
   0595 DD 39              1321 	add	ix,sp
   0597 21 F9 FF           1322 	ld	hl,#-7
   059A 39                 1323 	add	hl,sp
   059B F9                 1324 	ld	sp,hl
                           1325 ;queue.c:211: if (list->first == NULL && list->last == NULL) {
                           1326 ;	genAssign
                           1327 ;	AOP_STK for 
   059C DD 4E 04           1328 	ld	c,4(ix)
   059F DD 46 05           1329 	ld	b,5(ix)
                           1330 ;	genPointerGet
   05A2 69                 1331 	ld	l,c
   05A3 60                 1332 	ld	h,b
   05A4 5E                 1333 	ld	e,(hl)
   05A5 23                 1334 	inc	hl
   05A6 56                 1335 	ld	d,(hl)
                           1336 ;	genCmpEq
                           1337 ;	AOP_STK for _clist_insert_sloc1_1_0
                           1338 ; genCmpEq: left 2, right 2, result 1
                           1339 ;4
   05A7 7B                 1340 	ld	a,e
   05A8 B2                 1341 	or	a,d
   05A9 C2rB1s05           1342 	jp	nz,00112$
   05AC 3E 01              1343 	ld	a,#0x01
   05AE C3rB2s05           1344 	jp	00113$
   05B1                    1345 00112$:
   05B1 AF                 1346 	xor	a,a
   05B2                    1347 00113$:
                           1348 ;6
                           1349 ;	genIfx
                           1350 ;	AOP_STK for _clist_insert_sloc1_1_0
   05B2 DD 77 F9           1351 	ld	-7(ix),a
   05B5 B7                 1352 	or	a,a
   05B6 CAr07s06           1353 	jp	z,00102$
                           1354 ;	genPlus
                           1355 ;	AOP_STK for _clist_insert_sloc0_1_0
                           1356 ;	genPlusIncr
                           1357 ;	Can't optimise plus by inc, falling back to the normal way
   05B9 79                 1358 	ld	a,c
   05BA C6 02              1359 	add	a,#0x02
   05BC DD 77 FA           1360 	ld	-6(ix),a
   05BF 78                 1361 	ld	a,b
   05C0 CE 00              1362 	adc	a,#0x00
   05C2 DD 77 FB           1363 	ld	-5(ix),a
                           1364 ;	genPointerGet
                           1365 ;	AOP_STK for _clist_insert_sloc0_1_0
   05C5 DD 6E FA           1366 	ld	l,-6(ix)
   05C8 DD 66 FB           1367 	ld	h,-5(ix)
   05CB 56                 1368 	ld	d,(hl)
   05CC 23                 1369 	inc	hl
   05CD 5E                 1370 	ld	e,(hl)
                           1371 ;	genCmpEq
                           1372 ; genCmpEq: left 2, right 2, result 0
   05CE 7A                 1373 	ld	a,d
   05CF B3                 1374 	or	a,e
   05D0 CArD6s05           1375 	jp	z,00115$
   05D3                    1376 00114$:
   05D3 C3r07s06           1377 	jp	00102$
   05D6                    1378 00115$:
                           1379 ;queue.c:212: list->first = record;
                           1380 ;	genAssign (pointer)
                           1381 ;	AOP_STK for 
                           1382 ;	isBitvar = 0
   05D6 69                 1383 	ld	l,c
   05D7 60                 1384 	ld	h,b
   05D8 DD 7E 06           1385 	ld	a,6(ix)
   05DB 77                 1386 	ld	(hl),a
   05DC 23                 1387 	inc	hl
   05DD DD 7E 07           1388 	ld	a,7(ix)
   05E0 77                 1389 	ld	(hl),a
                           1390 ;queue.c:213: list->last = record;
                           1391 ;	genAssign (pointer)
                           1392 ;	AOP_STK for _clist_insert_sloc0_1_0
                           1393 ;	AOP_STK for 
                           1394 ;	isBitvar = 0
   05E1 DD 6E FA           1395 	ld	l,-6(ix)
   05E4 DD 66 FB           1396 	ld	h,-5(ix)
   05E7 DD 7E 06           1397 	ld	a,6(ix)
   05EA 77                 1398 	ld	(hl),a
   05EB 23                 1399 	inc	hl
   05EC DD 7E 07           1400 	ld	a,7(ix)
   05EF 77                 1401 	ld	(hl),a
                           1402 ;queue.c:214: record->prev = record;
                           1403 ;	genAssign
                           1404 ;	AOP_STK for 
   05F0 DD 4E 06           1405 	ld	c,6(ix)
   05F3 DD 46 07           1406 	ld	b,7(ix)
                           1407 ;	genAssign (pointer)
                           1408 ;	isBitvar = 0
   05F6 69                 1409 	ld	l,c
   05F7 60                 1410 	ld	h,b
   05F8 71                 1411 	ld	(hl),c
   05F9 23                 1412 	inc	hl
   05FA 70                 1413 	ld	(hl),b
                           1414 ;queue.c:215: record->next = record;
                           1415 ;	genPlus
                           1416 ;	genPlusIncr
   05FB 59                 1417 	ld	e,c
   05FC 50                 1418 	ld	d,b
   05FD 13                 1419 	inc	de
   05FE 13                 1420 	inc	de
                           1421 ;	genAssign (pointer)
                           1422 ;	isBitvar = 0
   05FF 6B                 1423 	ld	l,e
   0600 62                 1424 	ld	h,d
   0601 71                 1425 	ld	(hl),c
   0602 23                 1426 	inc	hl
   0603 70                 1427 	ld	(hl),b
                           1428 ;queue.c:216: return;
                           1429 ;	genRet
   0604 C3r9Es06           1430 	jp	00107$
                           1431 ;	genLabel
   0607                    1432 00102$:
                           1433 ;queue.c:220: if (list->first == NULL || list->last == NULL)
                           1434 ;	genIfx
                           1435 ;	AOP_STK for _clist_insert_sloc1_1_0
   0607 AF                 1436 	xor	a,a
   0608 DD B6 F9           1437 	or	a,-7(ix)
   060B C2r1Fs06           1438 	jp	nz,00104$
                           1439 ;	genPlus
                           1440 ;	genPlusIncr
   060E 59                 1441 	ld	e,c
   060F 50                 1442 	ld	d,b
   0610 13                 1443 	inc	de
   0611 13                 1444 	inc	de
                           1445 ;	genPointerGet
   0612 6B                 1446 	ld	l,e
   0613 62                 1447 	ld	h,d
   0614 5E                 1448 	ld	e,(hl)
   0615 23                 1449 	inc	hl
   0616 56                 1450 	ld	d,(hl)
                           1451 ;	genCmpEq
                           1452 ; genCmpEq: left 2, right 2, result 0
   0617 7B                 1453 	ld	a,e
   0618 B2                 1454 	or	a,d
   0619 CAr1Fs06           1455 	jp	z,00117$
   061C                    1456 00116$:
   061C C3r29s06           1457 	jp	00105$
   061F                    1458 00117$:
                           1459 ;	genLabel
   061F                    1460 00104$:
                           1461 ;queue.c:221: panic ("clist_insert(): Inconsistent header.\n");
                           1462 ;	genIpush
                           1463 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 1 deSending: 0
   061F C5                 1464 	push	bc
   0620 21rA3s06           1465 	ld	hl,#__str_7
   0623 E5                 1466 	push	hl
                           1467 ;	genCall
   0624 CDr00s00           1468 	call	_panic
   0627 F1                 1469 	pop	af
   0628 C1                 1470 	pop	bc
                           1471 ;	genLabel
   0629                    1472 00105$:
                           1473 ;queue.c:224: next = list->first;
                           1474 ;	genPointerGet
   0629 69                 1475 	ld	l,c
   062A 60                 1476 	ld	h,b
   062B 5E                 1477 	ld	e,(hl)
   062C 23                 1478 	inc	hl
   062D 56                 1479 	ld	d,(hl)
                           1480 ;	genAssign
                           1481 ;	AOP_STK for _clist_insert_next_1_1
   062E DD 73 FE           1482 	ld	-2(ix),e
   0631 DD 72 FF           1483 	ld	-1(ix),d
                           1484 ;queue.c:225: prev = next->prev;
                           1485 ;	genPointerGet
                           1486 ;	AOP_STK for _clist_insert_next_1_1
   0634 DD 6E FE           1487 	ld	l,-2(ix)
   0637 DD 66 FF           1488 	ld	h,-1(ix)
   063A 5E                 1489 	ld	e,(hl)
   063B 23                 1490 	inc	hl
   063C 56                 1491 	ld	d,(hl)
                           1492 ;	genAssign
                           1493 ;	AOP_STK for _clist_insert_prev_1_1
   063D DD 73 FC           1494 	ld	-4(ix),e
   0640 DD 72 FD           1495 	ld	-3(ix),d
                           1496 ;queue.c:227: record->next = next;
                           1497 ;	genAssign
                           1498 ;	AOP_STK for 
                           1499 ;	AOP_STK for _clist_insert_sloc0_1_0
   0643 DD 7E 06           1500 	ld	a,6(ix)
   0646 DD 77 FA           1501 	ld	-6(ix),a
   0649 DD 7E 07           1502 	ld	a,7(ix)
   064C DD 77 FB           1503 	ld	-5(ix),a
                           1504 ;	genPlus
                           1505 ;	AOP_STK for _clist_insert_sloc0_1_0
                           1506 ;	genPlusIncr
   064F DD 5E FA           1507 	ld	e,-6(ix)
   0652 DD 56 FB           1508 	ld	d,-5(ix)
   0655 13                 1509 	inc	de
   0656 13                 1510 	inc	de
                           1511 ;	genAssign (pointer)
                           1512 ;	AOP_STK for _clist_insert_next_1_1
                           1513 ;	isBitvar = 0
   0657 6B                 1514 	ld	l,e
   0658 62                 1515 	ld	h,d
   0659 DD 7E FE           1516 	ld	a,-2(ix)
   065C 77                 1517 	ld	(hl),a
   065D 23                 1518 	inc	hl
   065E DD 7E FF           1519 	ld	a,-1(ix)
   0661 77                 1520 	ld	(hl),a
                           1521 ;queue.c:228: record->prev = prev;
                           1522 ;	genAssign (pointer)
                           1523 ;	AOP_STK for _clist_insert_sloc0_1_0
                           1524 ;	AOP_STK for _clist_insert_prev_1_1
                           1525 ;	isBitvar = 0
   0662 DD 6E FA           1526 	ld	l,-6(ix)
   0665 DD 66 FB           1527 	ld	h,-5(ix)
   0668 DD 7E FC           1528 	ld	a,-4(ix)
   066B 77                 1529 	ld	(hl),a
   066C 23                 1530 	inc	hl
   066D DD 7E FD           1531 	ld	a,-3(ix)
   0670 77                 1532 	ld	(hl),a
                           1533 ;queue.c:229: next->prev = record;
                           1534 ;	genAssign (pointer)
                           1535 ;	AOP_STK for _clist_insert_next_1_1
                           1536 ;	AOP_STK for _clist_insert_sloc0_1_0
                           1537 ;	isBitvar = 0
   0671 DD 6E FE           1538 	ld	l,-2(ix)
   0674 DD 66 FF           1539 	ld	h,-1(ix)
   0677 DD 7E FA           1540 	ld	a,-6(ix)
   067A 77                 1541 	ld	(hl),a
   067B 23                 1542 	inc	hl
   067C DD 7E FB           1543 	ld	a,-5(ix)
   067F 77                 1544 	ld	(hl),a
                           1545 ;queue.c:230: prev->next = record;
                           1546 ;	genPlus
                           1547 ;	AOP_STK for _clist_insert_prev_1_1
                           1548 ;	genPlusIncr
   0680 DD 5E FC           1549 	ld	e,-4(ix)
   0683 DD 56 FD           1550 	ld	d,-3(ix)
   0686 13                 1551 	inc	de
   0687 13                 1552 	inc	de
                           1553 ;	genAssign (pointer)
                           1554 ;	AOP_STK for _clist_insert_sloc0_1_0
                           1555 ;	isBitvar = 0
   0688 6B                 1556 	ld	l,e
   0689 62                 1557 	ld	h,d
   068A DD 7E FA           1558 	ld	a,-6(ix)
   068D 77                 1559 	ld	(hl),a
   068E 23                 1560 	inc	hl
   068F DD 7E FB           1561 	ld	a,-5(ix)
   0692 77                 1562 	ld	(hl),a
                           1563 ;queue.c:231: list->first = record;
                           1564 ;	genAssign (pointer)
                           1565 ;	AOP_STK for _clist_insert_sloc0_1_0
                           1566 ;	isBitvar = 0
   0693 69                 1567 	ld	l,c
   0694 60                 1568 	ld	h,b
   0695 DD 7E FA           1569 	ld	a,-6(ix)
   0698 77                 1570 	ld	(hl),a
   0699 23                 1571 	inc	hl
   069A DD 7E FB           1572 	ld	a,-5(ix)
   069D 77                 1573 	ld	(hl),a
                           1574 ;	genLabel
   069E                    1575 00107$:
                           1576 ;	genEndFunction
   069E DD F9              1577 	ld	sp,ix
   06A0 DD E1              1578 	pop	ix
   06A2 C9                 1579 	ret
   06A3                    1580 _clist_insert_end::
   06A3                    1581 __str_7:
   06A3 63 6C 69 73 74 5F  1582 	.ascii "clist_insert(): Inconsistent header."
        69 6E 73 65 72 74
        28 29 3A 20 49 6E
        63 6F 6E 73 69 73
        74 65 6E 74 20 68
        65 61 64 65 72 2E
   06C7 0A                 1583 	.db 0x0A
   06C8 00                 1584 	.db 0x00
                           1585 	.area _CODE
