                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Oct 17 2006)
                              4 ; This file generated Thu Oct 19 04:08:18 2006
                              5 ;--------------------------------------------------------
                              6 	.module pool
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _pool_alloc
                             13 	.globl _pool_salloc
                             14 	.globl _pool_free
                             15 	.globl _pool_create
                             16 ;--------------------------------------------------------
                             17 ; special function registers
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ;  ram data
                             21 ;--------------------------------------------------------
                             22 	.area _DATA
                             23 ;--------------------------------------------------------
                             24 ; overlayable items in  ram 
                             25 ;--------------------------------------------------------
                             26 	.area _OVERLAY
                             27 ;--------------------------------------------------------
                             28 ; external initialized ram data
                             29 ;--------------------------------------------------------
                             30 ;--------------------------------------------------------
                             31 ; global & static initialisations
                             32 ;--------------------------------------------------------
                             33 	.area _HOME
                             34 	.area _GSINIT
                             35 	.area _GSFINAL
                             36 	.area _GSINIT
                             37 ;--------------------------------------------------------
                             38 ; Home
                             39 ;--------------------------------------------------------
                             40 	.area _HOME
                             41 	.area _CODE
                             42 ;--------------------------------------------------------
                             43 ; code
                             44 ;--------------------------------------------------------
                             45 	.area _CODE
                             46 ;pool.c:45: pool_alloc (struct pool *pool)
                             47 ;	genLabel
                             48 ;	genFunction
                             49 ;	---------------------------------
                             50 ; Function pool_alloc
                             51 ; ---------------------------------
   0000                      52 _pool_alloc_start::
   0000                      53 _pool_alloc:
   0000 DD E5                54 	push	ix
   0002 DD 21 00 00          55 	ld	ix,#0
   0006 DD 39                56 	add	ix,sp
   0008 21 FC FF             57 	ld	hl,#-4
   000B 39                   58 	add	hl,sp
   000C F9                   59 	ld	sp,hl
                             60 ;pool.c:49: DEQUEUE_POP(&pool->unused, rec);
                             61 ;	genAddrOf
                             62 ;	AOP_STK for _pool_alloc_sloc0_1_0
   000D 21 02 00             63 	ld	hl,#0x0002
   0010 39                   64 	add	hl,sp
   0011 DD 75 FC             65 	ld	-4(ix),l
   0014 DD 74 FD             66 	ld	-3(ix),h
                             67 ;	genAssign
                             68 ;	AOP_STK for 
   0017 DD 5E 04             69 	ld	e,4(ix)
   001A DD 56 05             70 	ld	d,5(ix)
                             71 ;	genPlus
                             72 ;	genPlusIncr
                             73 ;	Can't optimise plus by inc, falling back to the normal way
   001D 7B                   74 	ld	a,e
   001E C6 04                75 	add	a,#0x04
   0020 4F                   76 	ld	c,a
   0021 7A                   77 	ld	a,d
   0022 CE 00                78 	adc	a,#0x00
   0024 47                   79 	ld	b,a
                             80 ;	genIpush
                             81 ; _saveRegsForCall: sendSetSize: 0 deInUse: 1 bcInUse: 0 deSending: 0
   0025 D5                   82 	push	de
                             83 ;	AOP_STK for _pool_alloc_sloc0_1_0
   0026 DD 6E FC             84 	ld	l,-4(ix)
   0029 DD 66 FD             85 	ld	h,-3(ix)
   002C E5                   86 	push	hl
                             87 ;	genIpush
   002D C5                   88 	push	bc
                             89 ;	genCall
   002E CDr00s00             90 	call	_dequeue_pop
   0031 F1                   91 	pop	af
   0032 F1                   92 	pop	af
   0033 D1                   93 	pop	de
                             94 ;pool.c:51: if (rec == NULL)
                             95 ;	genCmpEq
                             96 ;	AOP_STK for _pool_alloc_rec_1_1
                             97 ; genCmpEq: left 2, right 2, result 0
   0034 DD 7E FE             98 	ld	a,-2(ix)
   0037 DD B6 FF             99 	or	a,-1(ix)
   003A CAr4As00            100 	jp	z,00103$
   003D                     101 00107$:
                            102 ;pool.c:54: DEQUEUE_PUSH(&pool->used, rec);
                            103 ;	genIpush
                            104 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
                            105 ;	AOP_STK for _pool_alloc_rec_1_1
   003D DD 6E FE            106 	ld	l,-2(ix)
   0040 DD 66 FF            107 	ld	h,-1(ix)
   0043 E5                  108 	push	hl
                            109 ;	genIpush
   0044 D5                  110 	push	de
                            111 ;	genCall
   0045 CDr00s00            112 	call	_dequeue_push
   0048 F1                  113 	pop	af
   0049 F1                  114 	pop	af
                            115 ;pool.c:60: end:
                            116 ;	genLabel
   004A                     117 00103$:
                            118 ;pool.c:61: return (void *) rec;
                            119 ;	genAssign
                            120 ;	AOP_STK for _pool_alloc_rec_1_1
   004A DD 6E FE            121 	ld	l,-2(ix)
   004D DD 66 FF            122 	ld	h,-1(ix)
                            123 ;	genRet
                            124 ; Dump of IC_LEFT: type AOP_STR size 2
                            125 ;	genLabel
   0050                     126 00104$:
                            127 ;	genEndFunction
   0050 DD F9               128 	ld	sp,ix
   0052 DD E1               129 	pop	ix
   0054 C9                  130 	ret
   0055                     131 _pool_alloc_end::
                            132 ;pool.c:65: pool_salloc (struct pool *pool)
                            133 ;	genLabel
                            134 ;	genFunction
                            135 ;	---------------------------------
                            136 ; Function pool_salloc
                            137 ; ---------------------------------
   0055                     138 _pool_salloc_start::
   0055                     139 _pool_salloc:
   0055 DD E5               140 	push	ix
   0057 DD 21 00 00         141 	ld	ix,#0
   005B DD 39               142 	add	ix,sp
   005D 21 FE FF            143 	ld	hl,#-2
   0060 39                  144 	add	hl,sp
   0061 F9                  145 	ld	sp,hl
                            146 ;pool.c:69: DEQUEUE_POP(&pool->unused, rec);
                            147 ;	genAddrOf
   0062 21 00 00            148 	ld	hl,#0x0000
   0065 39                  149 	add	hl,sp
   0066 4D                  150 	ld	c,l
   0067 44                  151 	ld	b,h
                            152 ;	genAssign
                            153 ;	AOP_STK for 
   0068 DD 5E 04            154 	ld	e,4(ix)
   006B DD 56 05            155 	ld	d,5(ix)
                            156 ;	genPlus
                            157 ;	genPlusIncr
   006E 13                  158 	inc	de
   006F 13                  159 	inc	de
   0070 13                  160 	inc	de
   0071 13                  161 	inc	de
                            162 ;	genIpush
                            163 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
   0072 C5                  164 	push	bc
                            165 ;	genIpush
   0073 D5                  166 	push	de
                            167 ;	genCall
   0074 CDr00s00            168 	call	_dequeue_pop
   0077 F1                  169 	pop	af
   0078 F1                  170 	pop	af
                            171 ;pool.c:78: return (void *) rec;
                            172 ;	genAssign
                            173 ;	AOP_STK for _pool_salloc_rec_1_1
   0079 DD 6E FE            174 	ld	l,-2(ix)
   007C DD 66 FF            175 	ld	h,-1(ix)
                            176 ;	genRet
                            177 ; Dump of IC_LEFT: type AOP_STR size 2
                            178 ;	genLabel
   007F                     179 00104$:
                            180 ;	genEndFunction
   007F DD F9               181 	ld	sp,ix
   0081 DD E1               182 	pop	ix
   0083 C9                  183 	ret
   0084                     184 _pool_salloc_end::
                            185 ;pool.c:82: pool_free (struct pool *pool, void *rec)
                            186 ;	genLabel
                            187 ;	genFunction
                            188 ;	---------------------------------
                            189 ; Function pool_free
                            190 ; ---------------------------------
   0084                     191 _pool_free_start::
   0084                     192 _pool_free:
   0084 DD E5               193 	push	ix
   0086 DD 21 00 00         194 	ld	ix,#0
   008A DD 39               195 	add	ix,sp
                            196 ;pool.c:84: struct dequeue_node *r = rec;
                            197 ;	genAssign
                            198 ;	(operands are equal 3)
                            199 ;pool.c:86: ASSERT_MEM(pool->area, r, "pool_free");
                            200 ;	genAssign
                            201 ;	AOP_STK for 
   008C DD 5E 04            202 	ld	e,4(ix)
   008F DD 56 05            203 	ld	d,5(ix)
                            204 ;	genPlus
                            205 ;	genPlusIncr
                            206 ;	Can't optimise plus by inc, falling back to the normal way
   0092 7B                  207 	ld	a,e
   0093 C6 09               208 	add	a,#0x09
   0095 4F                  209 	ld	c,a
   0096 7A                  210 	ld	a,d
   0097 CE 00               211 	adc	a,#0x00
   0099 47                  212 	ld	b,a
                            213 ;	genPointerGet
   009A 69                  214 	ld	l,c
   009B 60                  215 	ld	h,b
   009C 4E                  216 	ld	c,(hl)
   009D 23                  217 	inc	hl
   009E 46                  218 	ld	b,(hl)
                            219 ;	genIpush
                            220 ; _saveRegsForCall: sendSetSize: 0 deInUse: 1 bcInUse: 0 deSending: 0
   009F D5                  221 	push	de
   00A0 21rDAs00            222 	ld	hl,#__str_0
   00A3 E5                  223 	push	hl
                            224 ;	genIpush
                            225 ;	AOP_STK for 
   00A4 DD 6E 06            226 	ld	l,6(ix)
   00A7 DD 66 07            227 	ld	h,7(ix)
   00AA E5                  228 	push	hl
                            229 ;	genIpush
   00AB C5                  230 	push	bc
                            231 ;	genCall
   00AC CDr00s00            232 	call	_mem_boundary
   00AF F1                  233 	pop	af
   00B0 F1                  234 	pop	af
   00B1 F1                  235 	pop	af
   00B2 D1                  236 	pop	de
                            237 ;pool.c:92: DEQUEUE_REMOVE(&pool->used, r);
                            238 ;	genIpush
                            239 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
                            240 ;	AOP_STK for 
   00B3 DD 6E 06            241 	ld	l,6(ix)
   00B6 DD 66 07            242 	ld	h,7(ix)
   00B9 E5                  243 	push	hl
                            244 ;	genIpush
   00BA D5                  245 	push	de
                            246 ;	genCall
   00BB CDr00s00            247 	call	_dequeue_remove
   00BE F1                  248 	pop	af
   00BF F1                  249 	pop	af
                            250 ;pool.c:93: DEQUEUE_PUSH(&pool->unused, r);
                            251 ;	genAssign
                            252 ;	AOP_STK for 
   00C0 DD 4E 04            253 	ld	c,4(ix)
   00C3 DD 46 05            254 	ld	b,5(ix)
                            255 ;	genPlus
                            256 ;	genPlusIncr
   00C6 03                  257 	inc	bc
   00C7 03                  258 	inc	bc
   00C8 03                  259 	inc	bc
   00C9 03                  260 	inc	bc
                            261 ;	genIpush
                            262 ; _saveRegsForCall: sendSetSize: 0 deInUse: 0 bcInUse: 0 deSending: 0
                            263 ;	AOP_STK for 
   00CA DD 6E 06            264 	ld	l,6(ix)
   00CD DD 66 07            265 	ld	h,7(ix)
   00D0 E5                  266 	push	hl
                            267 ;	genIpush
   00D1 C5                  268 	push	bc
                            269 ;	genCall
   00D2 CDr00s00            270 	call	_dequeue_push
   00D5 F1                  271 	pop	af
   00D6 F1                  272 	pop	af
                            273 ;	genLabel
   00D7                     274 00101$:
                            275 ;	genEndFunction
   00D7 DD E1               276 	pop	ix
   00D9 C9                  277 	ret
   00DA                     278 _pool_free_end::
   00DA                     279 __str_0:
   00DA 70 6F 6F 6C 5F 66   280 	.ascii "pool_free"
        72 65 65
   00E3 00                  281 	.db 0x00
                            282 ;pool.c:98: pool_create (struct pool *pool, size_t size, size_t typesize)
                            283 ;	genLabel
                            284 ;	genFunction
                            285 ;	---------------------------------
                            286 ; Function pool_create
                            287 ; ---------------------------------
   00E4                     288 _pool_create_start::
   00E4                     289 _pool_create:
   00E4 DD E5               290 	push	ix
   00E6 DD 21 00 00         291 	ld	ix,#0
   00EA DD 39               292 	add	ix,sp
   00EC 21 F4 FF            293 	ld	hl,#-12
   00EF 39                  294 	add	hl,sp
   00F0 F9                  295 	ld	sp,hl
                            296 ;pool.c:100: struct dequeue_node *prev = NULL;
                            297 ;	genAssign
                            298 ;	AOP_STK for _pool_create_prev_1_1
   00F1 DD 36 FE 00         299 	ld	-2(ix),#0x00
   00F5 DD 36 FF 00         300 	ld	-1(ix),#0x00
                            301 ;pool.c:104: struct dequeue_hdr  *list = &(pool->unused);
                            302 ;	genAssign
                            303 ;	AOP_STK for 
   00F9 DD 5E 04            304 	ld	e,4(ix)
   00FC DD 56 05            305 	ld	d,5(ix)
                            306 ;	genPlus
                            307 ;	AOP_STK for _pool_create_list_1_1
                            308 ;	genPlusIncr
                            309 ;	Can't optimise plus by inc, falling back to the normal way
   00FF 7B                  310 	ld	a,e
   0100 C6 04               311 	add	a,#0x04
   0102 DD 77 F6            312 	ld	-10(ix),a
   0105 7A                  313 	ld	a,d
   0106 CE 00               314 	adc	a,#0x00
   0108 DD 77 F7            315 	ld	-9(ix),a
                            316 ;pool.c:106: size *= typesize;
                            317 ;	genIpush
                            318 ; _saveRegsForCall: sendSetSize: 0 deInUse: 1 bcInUse: 0 deSending: 0
   010B D5                  319 	push	de
                            320 ;	AOP_STK for 
   010C DD 6E 08            321 	ld	l,8(ix)
   010F DD 66 09            322 	ld	h,9(ix)
   0112 E5                  323 	push	hl
                            324 ;	genIpush
                            325 ;	AOP_STK for 
   0113 DD 6E 06            326 	ld	l,6(ix)
   0116 DD 66 07            327 	ld	h,7(ix)
   0119 E5                  328 	push	hl
                            329 ;	genCall
   011A CDr00s00            330 	call	__mulint_rrx_s
   011D 44                  331 	ld	b,h
   011E 4D                  332 	ld	c,l
   011F F1                  333 	pop	af
   0120 F1                  334 	pop	af
   0121 D1                  335 	pop	de
                            336 ;	genAssign
                            337 ;	AOP_STK for 
   0122 DD 71 06            338 	ld	6(ix),c
   0125 DD 70 07            339 	ld	7(ix),b
                            340 ;pool.c:116: pool->area = pos = i = kmalloc (size);
                            341 ;	genPlus
                            342 ;	genPlusIncr
                            343 ;	Can't optimise plus by inc, falling back to the normal way
   0128 7B                  344 	ld	a,e
   0129 C6 09               345 	add	a,#0x09
   012B 4F                  346 	ld	c,a
   012C 7A                  347 	ld	a,d
   012D CE 00               348 	adc	a,#0x00
   012F 47                  349 	ld	b,a
                            350 ;	genIpush
                            351 ; _saveRegsForCall: sendSetSize: 0 deInUse: 1 bcInUse: 1 deSending: 0
   0130 C5                  352 	push	bc
   0131 D5                  353 	push	de
                            354 ;	AOP_STK for 
   0132 DD 6E 06            355 	ld	l,6(ix)
   0135 DD 66 07            356 	ld	h,7(ix)
   0138 E5                  357 	push	hl
                            358 ;	genCall
   0139 CDr00s00            359 	call	_kmalloc
                            360 ;	AOP_STK for _pool_create_sloc1_1_0
   013C DD 74 F5            361 	ld	-11(ix),h
   013F DD 75 F4            362 	ld	-12(ix),l
   0142 F1                  363 	pop	af
   0143 D1                  364 	pop	de
   0144 C1                  365 	pop	bc
                            366 ;	genAssign
                            367 ;	AOP_STK for _pool_create_sloc1_1_0
                            368 ;	AOP_STK for _pool_create_i_1_1
   0145 DD 7E F4            369 	ld	a,-12(ix)
   0148 DD 77 FA            370 	ld	-6(ix),a
   014B DD 7E F5            371 	ld	a,-11(ix)
   014E DD 77 FB            372 	ld	-5(ix),a
                            373 ;	genAssign
                            374 ;	AOP_STK for _pool_create_i_1_1
                            375 ;	(registers are the same)
                            376 ;	genAssign
                            377 ;	AOP_STK for _pool_create_sloc1_1_0
                            378 ;	AOP_STK for _pool_create_pos_1_1
   0151 DD 7E F4            379 	ld	a,-12(ix)
   0154 DD 77 F8            380 	ld	-8(ix),a
   0157 DD 7E F5            381 	ld	a,-11(ix)
   015A DD 77 F9            382 	ld	-7(ix),a
                            383 ;	genAssign
                            384 ;	AOP_STK for _pool_create_pos_1_1
                            385 ;	(registers are the same)
                            386 ;	genAssign (pointer)
                            387 ;	AOP_STK for _pool_create_sloc1_1_0
                            388 ;	isBitvar = 0
   015D 69                  389 	ld	l,c
   015E 60                  390 	ld	h,b
   015F DD 7E F4            391 	ld	a,-12(ix)
   0162 77                  392 	ld	(hl),a
   0163 23                  393 	inc	hl
   0164 DD 7E F5            394 	ld	a,-11(ix)
   0167 77                  395 	ld	(hl),a
                            396 ;pool.c:117: if (i == NULL)
                            397 ;	genCmpEq
                            398 ;	AOP_STK for _pool_create_i_1_1
                            399 ; genCmpEq: left 2, right 2, result 0
   0168 DD 7E FA            400 	ld	a,-6(ix)
   016B DD B6 FB            401 	or	a,-5(ix)
   016E CAr74s01            402 	jp	z,00114$
   0171                     403 00113$:
   0171 C3r7As01            404 	jp	00102$
   0174                     405 00114$:
                            406 ;pool.c:118: return 0;
                            407 ;	genRet
                            408 ; Dump of IC_LEFT: type AOP_LIT size 2
   0174 21 00 00            409 	ld	hl,#0x0000
   0177 C3r30s02            410 	jp	00108$
                            411 ;	genLabel
   017A                     412 00102$:
                            413 ;pool.c:119: end = (struct dequeue_node *) POINTER_ADD(pos, size);
                            414 ;	genCast
                            415 ;	AOP_STK for _pool_create_pos_1_1
   017A DD 4E F8            416 	ld	c,-8(ix)
   017D DD 46 F9            417 	ld	b,-7(ix)
                            418 ;	genPlus
                            419 ;	AOP_STK for 
                            420 ;	Can't optimise plus by inc, falling back to the normal way
   0180 79                  421 	ld	a,c
   0181 DD 86 06            422 	add	a,6(ix)
   0184 4F                  423 	ld	c,a
   0185 78                  424 	ld	a,b
   0186 DD 8E 07            425 	adc	a,7(ix)
   0189 47                  426 	ld	b,a
                            427 ;	genCast
                            428 ;	AOP_STK for _pool_create_end_1_1
   018A DD 71 FC            429 	ld	-4(ix),c
   018D DD 70 FD            430 	ld	-3(ix),b
                            431 ;pool.c:121: list->first = i;
                            432 ;	genAssign (pointer)
                            433 ;	AOP_STK for _pool_create_list_1_1
                            434 ;	AOP_STK for _pool_create_i_1_1
                            435 ;	isBitvar = 0
   0190 DD 6E F6            436 	ld	l,-10(ix)
   0193 DD 66 F7            437 	ld	h,-9(ix)
   0196 DD 7E FA            438 	ld	a,-6(ix)
   0199 77                  439 	ld	(hl),a
   019A 23                  440 	inc	hl
   019B DD 7E FB            441 	ld	a,-5(ix)
   019E 77                  442 	ld	(hl),a
                            443 ;pool.c:122: while (1) {
                            444 ;	genLabel
   019F                     445 00106$:
                            446 ;pool.c:123: i->prev = prev; 
                            447 ;	genAssign (pointer)
                            448 ;	AOP_STK for _pool_create_i_1_1
                            449 ;	AOP_STK for _pool_create_prev_1_1
                            450 ;	isBitvar = 0
   019F DD 6E FA            451 	ld	l,-6(ix)
   01A2 DD 66 FB            452 	ld	h,-5(ix)
   01A5 DD 7E FE            453 	ld	a,-2(ix)
   01A8 77                  454 	ld	(hl),a
   01A9 23                  455 	inc	hl
   01AA DD 7E FF            456 	ld	a,-1(ix)
   01AD 77                  457 	ld	(hl),a
                            458 ;pool.c:124: i->next = POINTER_ADD(i, typesize);
                            459 ;	genPlus
                            460 ;	AOP_STK for _pool_create_i_1_1
                            461 ;	AOP_STK for _pool_create_sloc1_1_0
                            462 ;	genPlusIncr
                            463 ;	Can't optimise plus by inc, falling back to the normal way
   01AE DD 7E FA            464 	ld	a,-6(ix)
   01B1 C6 02               465 	add	a,#0x02
   01B3 DD 77 F4            466 	ld	-12(ix),a
   01B6 DD 7E FB            467 	ld	a,-5(ix)
   01B9 CE 00               468 	adc	a,#0x00
   01BB DD 77 F5            469 	ld	-11(ix),a
                            470 ;	genCast
                            471 ;	AOP_STK for _pool_create_i_1_1
   01BE DD 4E FA            472 	ld	c,-6(ix)
   01C1 DD 46 FB            473 	ld	b,-5(ix)
                            474 ;	genPlus
                            475 ;	AOP_STK for 
                            476 ;	Can't optimise plus by inc, falling back to the normal way
   01C4 79                  477 	ld	a,c
   01C5 DD 86 08            478 	add	a,8(ix)
   01C8 4F                  479 	ld	c,a
   01C9 78                  480 	ld	a,b
   01CA DD 8E 09            481 	adc	a,9(ix)
   01CD 47                  482 	ld	b,a
                            483 ;	genCast
                            484 ;	genAssign (pointer)
                            485 ;	AOP_STK for _pool_create_sloc1_1_0
                            486 ;	isBitvar = 0
   01CE DD 6E F4            487 	ld	l,-12(ix)
   01D1 DD 66 F5            488 	ld	h,-11(ix)
   01D4 71                  489 	ld	(hl),c
   01D5 23                  490 	inc	hl
   01D6 70                  491 	ld	(hl),b
                            492 ;pool.c:125: if (i->next >= end) {
                            493 ;	genCmpLt
                            494 ;	AOP_STK for _pool_create_end_1_1
   01D7 79                  495 	ld	a,c
   01D8 DD 96 FC            496 	sub	a,-4(ix)
   01DB 78                  497 	ld	a,b
   01DC DD 9E FD            498 	sbc	a,-3(ix)
   01DF FArF0s01            499 	jp	m,00104$
                            500 ;pool.c:126: i->next = 0;
                            501 ;	genAssign (pointer)
                            502 ;	AOP_STK for _pool_create_sloc1_1_0
                            503 ;	isBitvar = 0
   01E2 DD 6E F4            504 	ld	l,-12(ix)
   01E5 DD 66 F5            505 	ld	h,-11(ix)
   01E8 36 00               506 	ld	(hl),#0x00
   01EA 23                  507 	inc	hl
   01EB 36 00               508 	ld	(hl),#0x00
                            509 ;pool.c:127: break;
                            510 ;	genGoto
   01ED C3r05s02            511 	jp	00107$
                            512 ;	genLabel
   01F0                     513 00104$:
                            514 ;pool.c:129: prev = i;
                            515 ;	genAssign
                            516 ;	AOP_STK for _pool_create_i_1_1
                            517 ;	AOP_STK for _pool_create_prev_1_1
   01F0 DD 7E FA            518 	ld	a,-6(ix)
   01F3 DD 77 FE            519 	ld	-2(ix),a
   01F6 DD 7E FB            520 	ld	a,-5(ix)
   01F9 DD 77 FF            521 	ld	-1(ix),a
                            522 ;pool.c:130: i = POINTER_ADD(i, typesize);
                            523 ;	genAssign
                            524 ;	(registers are the same)
                            525 ;	genAssign
                            526 ;	AOP_STK for _pool_create_i_1_1
   01FC DD 71 FA            527 	ld	-6(ix),c
   01FF DD 70 FB            528 	ld	-5(ix),b
                            529 ;	genGoto
   0202 C3r9Fs01            530 	jp	00106$
                            531 ;	genLabel
   0205                     532 00107$:
                            533 ;pool.c:132: list->last = i;
                            534 ;	genPlus
                            535 ;	AOP_STK for _pool_create_list_1_1
                            536 ;	genPlusIncr
   0205 DD 4E F6            537 	ld	c,-10(ix)
   0208 DD 46 F7            538 	ld	b,-9(ix)
   020B 03                  539 	inc	bc
   020C 03                  540 	inc	bc
                            541 ;	genAssign (pointer)
                            542 ;	AOP_STK for _pool_create_i_1_1
                            543 ;	isBitvar = 0
   020D 69                  544 	ld	l,c
   020E 60                  545 	ld	h,b
   020F DD 7E FA            546 	ld	a,-6(ix)
   0212 77                  547 	ld	(hl),a
   0213 23                  548 	inc	hl
   0214 DD 7E FB            549 	ld	a,-5(ix)
   0217 77                  550 	ld	(hl),a
                            551 ;pool.c:134: DEQUEUE_WIPE(&(pool->used));
                            552 ;	genPlus
                            553 ;	genPlusIncr
   0218 4B                  554 	ld	c,e
   0219 42                  555 	ld	b,d
   021A 03                  556 	inc	bc
   021B 03                  557 	inc	bc
                            558 ;	genAssign (pointer)
                            559 ;	isBitvar = 0
   021C 69                  560 	ld	l,c
   021D 60                  561 	ld	h,b
   021E 36 00               562 	ld	(hl),#0x00
   0220 23                  563 	inc	hl
   0221 36 00               564 	ld	(hl),#0x00
                            565 ;	genAssign (pointer)
                            566 ;	isBitvar = 0
   0223 6B                  567 	ld	l,e
   0224 62                  568 	ld	h,d
   0225 36 00               569 	ld	(hl),#0x00
   0227 23                  570 	inc	hl
   0228 36 00               571 	ld	(hl),#0x00
                            572 ;pool.c:142: return pos;
                            573 ;	genRet
                            574 ;	AOP_STK for _pool_create_pos_1_1
                            575 ; Dump of IC_LEFT: type AOP_STK size 2
                            576 ;	 aop_stk -8
   022A DD 6E F8            577 	ld	l,-8(ix)
   022D DD 66 F9            578 	ld	h,-7(ix)
                            579 ;	genLabel
   0230                     580 00108$:
                            581 ;	genEndFunction
   0230 DD F9               582 	ld	sp,ix
   0232 DD E1               583 	pop	ix
   0234 C9                  584 	ret
   0235                     585 _pool_create_end::
                            586 	.area _CODE
